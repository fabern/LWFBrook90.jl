var documenterSearchIndex = {"docs":
[{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"CurrentModule = LWFBrook90","category":"page"},{"location":"function-docs/#Function-Documentations","page":"Function Documentations","title":"Function Documentations","text":"","category":"section"},{"location":"function-docs/#Functions-from-file-example/BEA2016...-input/func_run_example.jl","page":"Function Documentations","title":"Functions from file example/BEA2016...-input/func_run_example.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"example/BEA2016-reset-FALSE-input/func_run_example.jl\"]","category":"page"},{"location":"function-docs/#LWFBrook90.run_example-Tuple{}","page":"Function Documentations","title":"LWFBrook90.run_example","text":"run_example()\n\nRun example simulation located in \"/example/BEA2016-reset-FALSE-input\" for 100 days and return a Dict containing the solution (solution object of DifferentialEquations.jl) and other variables useful for plotting.\n\nExample:\n\nusing LWFBrook90\nusing Plots\nexample = LWFBrook90.run_example()\n\n# Plot scalar solution\n# Using dates (but not interpolated)\nplot(example[\"solutionDates\"],\n    example[\"solution\"][[1,2,3,4,5,6],:]',\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Using simple plot recipe that interpolates, but without dates\nplot(example[\"solution\"];\n    vars = [1, 2, 3, 4, 5, 6],\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Plot vector solution\nx = example[\"solutionDates\"]\ny = cumsum(example[\"thickness\"])\nz = example[\"solution\"][7 .+ (0:example[\"NLAYER\"]-1), :]./example[\"thickness\"]\nheatmap(x, y, z,\n    yflip = true,\n    xlabel = \"Date\",\n    ylabel = \"Depth\",\n    colorbar_title = \"Î¸\")\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-from-file-LWFBrook90.jl","page":"Function Documentations","title":"Functions from file LWFBrook90.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"LWFBrook90.jl\"]","category":"page"},{"location":"function-docs/#Functions-from-file-func_input_definition.jl","page":"Function Documentations","title":"Functions from file func_input_definition.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"func_input_definition.jl\"]","category":"page"},{"location":"function-docs/#LWFBrook90.DateTime2RelativeDaysFloat-Tuple{Dates.DateTime,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.DateTime2RelativeDaysFloat","text":"DateTime2RelativeDaysFloat(x,reference_DateTime)\n\nTransforms DateTimes x to simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.RelativeDaysFloat2DateTime-Tuple{Float64,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.RelativeDaysFloat2DateTime","text":"RelativeDaysFloat2DateTime(t, reference_DateTime)\n\nTransforms simulation time t to DateTimes\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.p_DOY-Tuple{Float64,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.p_DOY","text":"p_DOY(t::Float64, reference::DateTime)\n\nGet DOY (Day Of Year) from simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.p_MONTHN-Tuple{Float64,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.p_MONTHN","text":"p_MONTHN(t::Float64, reference::DateTime)\n\nGet Month from simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.read_LWFBrook90R_inputData-Tuple{String,String}","page":"Function Documentations","title":"LWFBrook90.read_LWFBrook90R_inputData","text":"read_LWFBrook90R_inputData(folder::String, prefix::String)\n\nLoad different input files for LWFBrook90:\n\nclimveg\nparam\nsiteparam\npdur\nsoil_materials.csv\nsoil_nodes.csv\n\nThese files were created with an R script generate_LWFBrook90Julia_Input.R that takes the same arguements as the R funciton LWFBrook90R::run_LWFB90() and generates the corresponding Julia input functions.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-defining-the-DiffEq.jl-system-of-ODE-(p,-u0,-f,-callbacks,-...)","page":"Function Documentations","title":"Functions defining the DiffEq.jl system of ODE (p, u0, f, callbacks, ...)","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"func_DiffEq_definition_u0.jl\",\n           \"func_DiffEq_definition_p.jl\",\n           \"func_DiffEq_definition_cb.jl\",\n           \"func_DiffEq_definition_f.jl\",\n           \"func_DiffEq_definition_ode.jl\",\n           \"func_MSB_functions.jl\"\n           ]","category":"page"},{"location":"function-docs/#LWFBrook90.define_LWFB90_u0-NTuple{8,Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_u0","text":"define_LWFB90_u0()\n\nGenerate vector u0 needed for ODE() problem in DiffEq.jl package.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_p-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_p","text":"define_diff_eq_parameters()\n\nGenerate vector p needed for ODE() problem in DiffEq.jl package.\n\nArguments\n\nNLAYER::...: TODO argument description.\nIMODEL::...: TODO argument description.\nconstant_dt_solver::...: TODO argument description.\nNOOUTF::...: TODO argument description.\nReset::...: TODO argument description.\ncompute_intermediate_quantities::...: TODO argument description.\npfile_meteo::...: TODO argument description.\npfile_siteparam::...: TODO argument description.\npfile_param::...: TODO argument description.\npfile_soil::...: TODO argument description.\npfile_pdur::...: TODO argument description.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_cb-Tuple{}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_cb","text":"define_LWFB90_cb()\n\nGenerate callback function cb needed for ODE() problem in DiffEq.jl package.\n\nLWFBrook90 updates states INTS, INTR, SNOW, CC, SNOWLQ not continuously but only once per day. This operator splitting (daily vs continuous update of ODEs) is implemented by using this callback function which is called once per day.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_ODE-Tuple{Any,Any,Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_ODE","text":"define_LWFB90_ODE()\n\nGenerates an ODEProblem from DiffEq.jl\n\nAn ODE problem which consists of\n\ndefinition of right-hand-side (RHS) function f\ndefinition of callback function cb\ninitial condition of states\ndefinition of simulation time span\nparameters\n\nSeperate updating of different states (INTS, INTR, SNOW, CC, SNOWLQ are updated once per day while GWAT and SWATI are updated continuously) is implemented by means of operator splitting using a callback function for the daily updates and a ODE RHS (right hand side) for the continuous update.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.MSBSETVARS-NTuple{57,Any}","page":"Function Documentations","title":"LWFBrook90.MSBSETVARS","text":"MSBSETVARS()\n\nCompute state dependent parameters for updating states INTS, INTR, SNOW, CC, SNOWLQ in callback function.\n\nArguments\n\nmany\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-from-the-different-modules-defining-LWF-BROOK90","page":"Function Documentations","title":"Functions from the different modules defining LWF-BROOK90","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90.CONSTANTS,\n           LWFBrook90.GLBLDECL,\n           LWFBrook90.KPT,\n           LWFBrook90.WAT,\n           LWFBrook90.SUN,\n           LWFBrook90.PET,\n           LWFBrook90.SNO,\n           LWFBrook90.EVP\n           ]\nPages   = [\"module_CONSTANTS.jl\",\n           \"module_GLBLDECL.jl\",\n           \"module_KPT.jl\",\n           \"module_WAT.jl\",\n           \"module_SUN.jl\",\n           \"module_PET.jl\",\n           \"module_SNO.jl\",\n           \"module_EVP.jl\"\n           ]\nOrder = [:constant, :type, :function, :macro]","category":"page"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_inputData-Tuple{DataFrames.DataFrame,DataFrames.DataFrame,DataFrames.DataFrame,DataFrames.DataFrame,DataFrames.DataFrame,DataFrames.DataFrame,DataFrames.DataFrame,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_inputData","text":"derive_params_from_inputData(input_meteo::DataFrame, input_param::DataFrame, input_siteparam::DataFrame,\ninput_precdat::DataFrame, input_pdur::DataFrame, input_soil_materials::DataFrame, input_soil_nodes::DataFrame)\n\nTake input data sets and defines parameters needed for simulation.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_input_meteo-Tuple{DataFrames.DataFrame,Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_input_meteo","text":"derive_params_from_input_meteo(input_meteo::DataFrame)\n\nTake climate and vegetation parameters in input_meteo and generates continuous parameters.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_input_param-Tuple{Any}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_input_param","text":"derive_params_from_input_param(input_param)\n\nunction that defines constant parameters from input_param. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_input_pdur-Tuple{Any}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_input_pdur","text":"derive_params_from_input_pdur(input_pdur)\n\nDefine constant parameters from input_pdur. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_input_siteparam-Tuple{Any}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_input_siteparam","text":"derive_params_from_input_siteparam(input_siteparam)\n\nDefine constant parameters from input_siteparam. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.GLBLDECL.derive_params_from_input_soil-NTuple{10,Any}","page":"Function Documentations","title":"LWFBrook90.GLBLDECL.derive_params_from_input_soil","text":"derive_params_from_input_soil(input_soil_materials,IMODEL, ILAYER, QLAYER, NLAYER)\n\nDefine constant parameters from input_pdur. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.FK_MvG-NTuple{4,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.FK_MvG","text":"FK_MvG(WETNES, KSAT, MvGl, MvGn)\n\nCompute hydraulic conductivity from wetness for the Mualem van Genuchten parametrization.\n\nCompute unsaturated hydraulic conductivity: K(Se) a.k.a. K(W) using MvG equation 8) K = KsW^l[ 1 - (1-W^(1/m))^m ]^2 using m = 1-1/n yields: K = KsW^l[ 1 - (1-W^(n/(n-1)))^(1-1/n) ]^2\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.FPSIMF_CH-NTuple{7,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.FPSIMF_CH","text":"FPSIM_MvG(u_aux_WETNES, p_MvGÎ±, p_MvGn)\n\nCompute Ï(Se) = h(Se) a.k.a Ï(W) = h(W).\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.FTheta_MvG-Tuple{Any,Any,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.FTheta_MvG","text":"FTheta_MvG(u_aux_WETNES, p_Î¸s, p_Î¸r, iModel)\n\nCompute Î¸ based on Se.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.FWETNES_CH-NTuple{7,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.FWETNES_CH","text":"FWETNES_CH(u_aux_PSIM,p_WETF, p_WETâ, p_BEXP, p_PSIF, p_CHM, p_CHN)\n\nComputes Î¸(Ï) = Î¸(h) by computing first Se(Ï)=Se(h) a.k.a  W(Ï)=W(h)\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.FWETNES_MvG-Tuple{Any,Any,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.FWETNES_MvG","text":"FWETNES_MvG(u_aux_PSIM, p_MvGÎ±, p_MvGn)\n\nComputes Î¸(Ï) = Î¸(h) by computing first Se(Ï)=Se(h) a.k.a  W(Ï)=W(h)\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.SOILPAR-NTuple{18,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.SOILPAR","text":"SOILPAR()\n\nDefine constant parameters from input_siteparam. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.KPT.derive_auxiliary_SOILVAR-NTuple{18,Any}","page":"Function Documentations","title":"LWFBrook90.KPT.derive_auxiliary_SOILVAR","text":"derive_auxiliary_SOILVAR(u_SWATI, p_SWATMX, p_THSAT,\n             p_PSIF, p_BEXP, p_WETINF, p_WETF, p_CHM, p_CHN, p_KF,\n             p_Î¸r, p_MvGÎ±, p_MvGn, p_MvGl, p_Ksat,\n             p_PSIG, NLAYER, IMODEL)\n\nDerive alternative representations of soil water status.\n\nBased on the state uSWATI it returns (uauxWETNES, uauxPSIM, uauxPSITI, pfu_KK)\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.BYFLFR-NTuple{6,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.BYFLFR","text":"BYFLFR(NLAYER, p_BYPAR, p_QFPAR, p_QFFC, u_aux_WETNES, p_WETF)\n\nCompute fraction of bypass flow.\n\nEcoshift\n\n\" Bypass flow (BYFL) and surface or source area flow (SRFL) are the two stormflow or quickflow generating mechanisms in BROOK90. The conceptual difference is that SRFL is \"new\" water that has not infiltrated but has moved across the surface to a channel, whereas BYFL is \"new\" water that has moved to a channel below the surface via macropores or pipes. In BROOK90 the amount of BYFL from each layer depends on the wetness of that particular layer and on the amount of infiltration to it, which is controlled by INFEXP. The amount of SRFL depends on the total wetness of all soil layers down to and including input parameter QDEPTH . In general users should not try to model BYFL and SRFL simultaneously because trying to fit parameters for both at the same time would be too complicated. The parameter BYPAR is set to 1 to allow BYFL and zero to prevent it. SRFL is prevented by setting both QDEPTH and IMPERV to zero. The same parameters, QFFC and QFPAR, are used for SRFL and for BYFL from all layers.\n\nWhen BYPAR = 0, there is no bypass flow from deeper layers, but bypass flow is still generated from layer 1 when the layer would otherwise become oversaturated. When INFEXP = 0 or IDEPTH = 0, BYFL can only be generated from layer 1 because it is the only layer receiving infiltrated water.\n\nIn each iteration loop, subroutine BYFLFR calculates the fraction of the water infiltrating to each layer that becomes bypass flow (BYFRACi) as\n\nBYFRACi = QFFC ^ [ 1 - (1 / QFPAR) * (WETNESi - WETFi) / (1 - WETFi ) ]\n\nwhere WETNESi is the layer wetness, WETFi is the layer wetness at field capacity, and QFFC and QFPAR are parameters. QFFC is the bypass fraction at field capacity (WETNESi = WETFi). QFPAR represents the fraction of the water content between field capacity and saturation at which BYFRAC reaches 1 (Fig. WAT-2). BYFRAC increases exponentially with layer wetness and is prevented from exceeding 1. Raising QFFC will raise BYFL proportionally at all water contents. Raising QFPAR will increase BYFL for soil drier than field capacity and decrease it for soil above field capacity (Fig. WAT-2).\n\nWith BYPAR = 1 and QFPAR = 0, BYFRAC is 0 below field capacity and 1 above it, and QFFC is ignored. With a single soil layer and no SRFL, this produces a classic \"bucket\" model, with the leakiness of the bucket determined by DRAIN. With multiple layers and BYPAR = 1, the bucket model does not work because a layer at field capacity diverts all excess water to BYFL, preventing wetting of deeper layers. See SRFLFR for a modified bucket model with multiple layers.\n\nWhen QFPAR = 1, BYFRAC reaches 1 when the layer is saturated (Fig WAT-2). A very large QFPAR produces a constant BYFRAC of QFFC.\n\nNote that BYFRAC is calculated from soil water prior to the input of water for the time step. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.DSLOP-NTuple{7,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.DSLOP","text":"DSLOP()\n\nCompute downslope flow rate from layer.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.GWATER-NTuple{5,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.GWATER","text":"GWATER(u_GWAT, p_GSC, p_GSP, p_DT, aux_du_VRFLIN)\n\nCalculate groundwater flow and seepage loss.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.INFLOW-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.INFLOW","text":"INFLOW(NLAYER, DTI, p_INFRAC, p_fu_BYFRAC, p_fu_SLFL,\naux_du_DSFLI, aux_du_TRANI, aux_du_SLVP, p_SWATMX, u_SWATI, VRFLI_prior)\n\nCompute net inflow to soil layer.\n\nEcoshift\n\n\" In this routine, infiltrating water (SLFL) is allocated to soil water in each layer (INFLIi ) and to bypass flow from each layer (BYFLIi ). The fraction of SLFL going to each layer (INFRACi ) is constant and is obtained in subroutine INFPAR. This fraction is separated into water to bypass flow (BYFLIi ) and water to the soil matrix (INFLIi ) by the bypass flow fraction (BYFRACi ) from subroutine BYFLFR. The routine then calculates net inflow to each layer, including withdrawal by transpiration and soil evaporation. INFLOW is called once each iteration time step and then is called once again if subroutine ITER produces a new, shorter, iteration time step.\n\nThe INFLOW routine is passed through once for each layer, working from the bottom up, preventing oversaturation of any layer. The total water allocated to layer i is\n\nINFIL = INFRACi * SLFL.\n\nBypass flow rate is\n\nBYFLIi = BYFRACi * INFIL\n\nand the infiltration to soil matrix water in the layer is\n\nINFLIi = INFIL - BYFLIi.\n\nINFLOW next determines the maximum inflow rate (MAXINi ), to the layer that can be allowed in the iteration time-step. The vertical flow to the next layer down (VRFLIi ) (which may be negative), the transpiration withdrawal (TRANIi ), and the downslope flow (DSFLIi ) are fixed. So\n\nMAXINi = (SWATMXi - SWATIi) / DTI + VRFLIi + DSFLIi + TRANIi\n\nwhere DTI is the iteration time step.\n\nIf VRFLIi-1 + INFLIi exceeds MAXIN, then oversaturation will occur. If BYFRACi > 0, INFLIi is first reduced toward zero, then, if necessary, VRFLIi-1 is reduced, or even made negative if VRFLIi is negative. BYFLIi is increased by the amount that INFLIi is reduced. If BYFRACi = 0, VRFLIi-1 is reduced or even made negative. INFLOW finally calculates the net water flux rate, NTFLIi into each soil layer.\n\nNTFLI(I%) = VV(I% - 1) + INFLI(I%) - VV(I%) - DSFLI(I%) - TRANI(I%)\n\nwhere VV is the final value of VRFLI.\n\nIn the top layer, soil evaporation withdrawal is also added to MAXIN. Because there is no VRFLI(0) to reduce, excess water becomes negative INFLI(1) and increases BYFLI(1).\n\nThe modified values of VRFLIi are output from the INFLOW routine as variable VV because the original VRFLIi are needed again if the iteration time step (DTI) is reduced. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.INFPAR-NTuple{4,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.INFPAR","text":"INFPAR(p_INFEXP, p_ILAYER, p_THICK, NLAYER)\n\nCompute fraction of infiltration to each soil layer.\n\nArguments:\n\np_INFEXP: infiltration exponent: 0 all to top, 1 uniform with depth, >1.0=more at bottom than at top\np_ILAYER: number of layers over which infiltration is distributed\np_THICK\nNLAYER\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.KKMEAN-NTuple{4,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.KKMEAN","text":"KKMEAN(KK_i, KK_iplus1, THICK_i, THICK_iplus1)\n\nCompute average hydraulic conductivity.\n\nNote that between version 3.1 (where LWFBrook90 was forked), and 4.8 of Brook90 there were different variants how to compute the average.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.LWFRootGrowth-NTuple{7,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.LWFRootGrowth","text":"LWFRootGrowth(frelden, tini, age, rgroper, inirdep, inirlen, NLAYER)\n\nCompute root growth according to LWF root growth model, (Hammel and Kennel 2000).\n\nArguments:\n\n- `frelden[]`:  final relative values of root length per unit volume\n- `tini[]`   :  initial time for root growth in layer\n- `age`      :  age of vegetation\n- `rgroper`  :  period of root growth in layer, a\n- `inirdep`  :  intial root depth, m\n- `inirlen`  :  intial total root length, m m-2\n- `NLAYER`   :  number of soil layers\n\nReturns:     - RELDEN[]  : current, age-dependent relative values of root length per unit volume\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.WAT.VERT-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.WAT.VERT","text":"VERT()\n\nCompute vertical flow rate.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SUN.AVAILEN-NTuple{12,Any}","page":"Function Documentations","title":"LWFBrook90.SUN.AVAILEN","text":"AVAILEN(SLRAD, p_fu_ALBEDO, p_C1, p_C2, p_C3, p_fu_TA, p_fT_EA, RATIO, p_fu_SHEAT, p_CR,\np_fu_LAI, p_fu_SAI)\n\nEstimate the available energy above and below the canopy.\n\nEcoshift\n\n\" Estimates of available energy above and below the canopy are made in subroutine AVAILEN. Available energy is net radiation minus subsurface heat flux (SHEAT), and is the energy available for partitioning into heating the air and evaporating water. SHEAT is set to zero in code in MSBSETVARS.\n\nAVAILEN calculates the available energies on an instantaneous basis, that is, in W/m2. MSBDAYNIGHT supplies to AVAILEN the average daytime solar radiation on the given slope (SLRAD, W/m2) as\n\nSLRAD = SLFDAY * SOLRAD / (WTOMJ * DAYLEN)\n\nwhere SOLRAD is the input daily solar radiation (MJ m-2) on a horizontal surface, and WTOMJ converts W m-2 to MJ m-2 d-1.\n\nNet solar radiation (SOLNET) is\n\nSOLNET = (1 - ALBEDO) * SLRAD\n\nwhere ALBEDO is the albedo of the surface (above any canopy). When there is snow on the ground, albedo is the parameter ALBSN, otherwise it is the parameter ALB.\n\nEstimation of net longwave radiation has been the subject of much research. BROOK90 uses Brutsaert's (1982) equation for effective clear sky emissivity (EFFEM)\n\nEFFEM = 1.24 * [ EA * 10 / ( TA + 273.15 ] 1 / 7\n\nwhere EA is the vapor pressure in kPa, and TA is the air temperature in Â°C. Alternative formulations for clear sky emissivity generally differ by 30 to 50 W/m2 in net longwave radiation under clear sky for the same temperature and humidity. This is equivalent to 1.1 to 1.8 mm/d of evaporated water, a substantial amount! The differences among equations were not systematic but depended on temperature and humidity (see the next section). Consequently the differences are reduced when totalled over a long time, and are further reduced by cloudiness. The Brutsaert equation is the most central.\n\nA cloud cover correction (CLDCOR) to net longwave radiation has been used widely in the form\n\nCLDCOR = C3 + ( 1 - C3 ) * NOVERN\n\nwhere NOVERN is the sunshine duration for the day, normally written as n/N, or the fraction of possible hours of sunshine. C3 is a fixed parameter in BROOK90. NOVERN is obtained by inverting a common relation of solar radiation to sunshine duration to the form\n\nNOVERN = ( RATIO - C1 ) / C2 , but not < 0 or > 1,\n\nwhere RATIO is SOLRAD / I0HDAY, or the ratio of solar radiation to potential radiation on a horizontal surface, and C1 and C2 are empirical parameters.\n\nThe net longwave radiation (LNGNET) is\n\nLNGNET = ( EFFEM - 1 ) * CLDCOR * SIGMA * ( TA + 273.15 )4\n\nwhere SIGMA is the Stefan-Boltzmann constant. Then net radiation (RN) is\n\nRN = SOLNET + LNGNET\n\nand available energy above the canopy (AA) is\n\nAA = RN - SHEAT.\n\nNet radiation is assumed to be reduced exponentially down through the canopy according to an extinction coefficient (CR) and the sum of leaf area index (LAI) and stem area index (SAI), so the available energy at the ground (ASUBS) is\n\nASUBS = RN * exp [-CR * ( LAI + SAI ) ] - SHEAT.\n\nApplying the extinction coefficient for photosynthetically-active radiation (CR) to net radiation as well is theoretically incorrect. The extinction coefficient for net radiation should be less than for PAR. But given the other uncertainties in both uses of CR there is not much point in differentiating the two values.\n\nClear-sky Longwave Radiation\n\nA number of equations exist for estimating downward longwave radiation from clear sky, EFFEM, based only on weather station temperature and humidity. I have compared these methods by showing the net longwave radiation (to avoid the fourth power temperature response of the downward flux) as a function of temperature for three different relative humidities. I have not seen such a presentation in the literature, but it seems to show the differences among methods quite well.\n\nFig SUN-1Fig. SUN-1. Net longwave radiation from a clear sky estimated by five different equations, as a function of temperature for three relative humidities. The Y axis should read \"Net Longwave Radiation from Clear Sky\".\n\nThe methods differ only in how they express EFFEM (e):\n\nBrunt (1932)    e = ca + cb ea0.5 Satterlund (1979)   e = 1.08 {1 - exp[-(10 ea)K / 2016]} Brutsaert (1982)    e = 1.24 (10 ea / K)1/7 Idso and Jackson (1969) e = 1 - 0.261 exp(-0.000777 T2) Swinbank (1963) e = 0.0000092 K2 where ea is the vapor pressure in kPa, T is the temperature in Â°C, and K is the temperature in Â°K. The (mostly) upper Brunt curve has ca = 0.65, cb = 0.134 (kPa-0.5) (Fitzpatrick and Stern 1966), the middle curve has ca = 0.52, cb = 0.206 (Brunt 1932), and the lower curve has ca = 0.44, cb = 0.253 (Penman 1948). Note that the Swinbank and Idso-Jackson curves have no humidity dependence. Brutsaert (1982) admits that Satterlund's equation matches the data better below freezing, but Satterlund has a very flat temperature response and is the highest method of all for temperatures of 0 to 20Â°C and humidities above 60%. The Brutsaert method tends to be the most central over the whole range of possible conditions.\n\nAt most temperatures, the range of net longwave radiation is about 50 W/m2, which is equivalent to an evaporation of 1.8 mm/d! The choice of method for clear-sky emissivity thus plays a major role in the value of PE estimates when net radiation is estimated. A major effort using worldwide longwave data (not estimates from models!) will be needed to improve this situation. Fortunately, the cloud cover correction, approximate as it is, brings the net longwave closer to zero and helps wash out the emissivity error. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SUN.EQUIVSLP-Tuple{Any,Any,Any}","page":"Function Documentations","title":"LWFBrook90.SUN.EQUIVSLP","text":"EQUIVSLP(p_LAT, SLOPE, p_ASPECT)\n\nCorrect solar radiation for slope and aspect and compute \"equivalent slope\" parameters.\n\nEcoshift\n\n\" Correction of solar radiation for slope and aspect requires calculation of an \"equivalent slope\" in subroutine EQUIVSLP. The equivalent slope is defined as the location on the earth's surface where a horizontal surface is parallel to the given sloping surface. Following Swift (1976), L1 is the latitude of this \"equivalent slope\" (which is actually a horizontal surface), and L2 is the difference in hour angle (longitude) between the two locations. For any given slope and aspect, L1 and L2 need be found only once; they do not change over time. So they are calculated in EQUIVSLP at the beginning of B90, as:\n\nL1 = ASIN[ COS(SLOPE) * SIN(LAT) + SIN(SLOPE) * COS(LAT)* COS(ASPECT) ] and L2 = ATAN { SIN(SLOPE) * SIN(ASPECT) /[ COS(SLOPE) * COS(LAT) - SIN(SLOPE) * SIN(LAT) * COS(ASPECT) ] }\n\nwith fixes for negative or zero denominator in L2, where SLOPE (ESLOPE), ASPECT, and latitude (LAT) are input parameters describing the location. All angles in the subroutine are in radians. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SUN.SUNDS-NTuple{8,Any}","page":"Function Documentations","title":"LWFBrook90.SUN.SUNDS","text":"SUNDS()\n\nReturn pfTDAYLEN, pfTI0HDAY, pfTSLFDAY.\n\nEcoshift\n\n\" Several radiation-related variables depend only on day of the year and location. These are calculated in SUNDS, which is called once a day.\n\nSUNDS requires the solar constant (SCD), which is the radiation (W/m2) on a surface normal to the sun outside the atmosphere. It depends on day-of-the-year (DOY) to determine the earth-sun distance and is\n\nSCD = SC / (1 - .0167 * COS(.0172 * (DOY - 3))) ^ 2\n\nwhere SC is the solar constant at the mean earth-sun distance (Swift 1976). SC is set to 1367 W/m2 (Lean 1991) and can not be changed.\n\nThe declination of the sun (DEC) is the angle by which the sun is above or below the plane of the earth's equator. DEC is zero at the equinoxes and +23.5Â° or -23.5 at the solstices. Swift (1976) gives the solar declination (radians) as:\n\nDEC = ASIN { 0.39785 * SIN [ 4.86961 + 0.017203 * DOY + 0.033446 * SIN ( 6.224111 + 0.017202\n\nDOY ) ] }\n\nThe daily integral of potential insolation on a slope (I0SDAY, MJ/m2) is given by Swift (1976) as:\n\nI0SDAY = WTOMJ * SCD * FUNC3(DEC, L2, L1, T3, T2)\n\nwhere\n\nFUNC3 = (Ï/ 2) { SIN(DEC) * SIN(L1) * (T3 - T2) + COS(DEC) * COS(L1) * [ SIN(T3 + L2) - SIN(T2 + L2) ] }\n\nis a program function and T2 and T3 are the hour angles of sunrise and sunset on the slope, which are obtained from function HAFDAY using the latitude of the equivalent slope. FUNC3 has units of d-1 and WTOMJ is the conversion factor 0.0864 (MJ m-2 d-1) / (W m-2). The actual SUNDS algorithm is more complicated than this because it must consider the possibility of two sunrises and sunsets on the slope in one day. The details of the algorithm are given by Swift (1976). Note that this algorithm assumes that the \"opposing slope\" is horizontal. In reality in mountainous terrain, the potential insolation is further reduced by any distant terrain that obscures the horizon more than the given slope itself does. The calculation of such obscuration is difficult and is outside the scope of BROOK90.\n\nThe daily integral of potential insolation on a horizontal surface (I0HDAY, MJ/m2) is found from the I0SDAY equation with L1 = LAT, L2 = 0, and T3 and T2 for a horizontal surface at LAT. The daylength (DAYLEN), which is the fraction of a day that the sun is above a horizontal horizon, is HAFDAY / Ï where function HAFDAY is used with L = LAT. SLFDAY is the ratio of I0SDAY to I0HDAY. SUNDS outputs DAYLEN, I0HDAY, and SLFDAY. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.ESAT-Tuple{Any}","page":"Function Documentations","title":"LWFBrook90.PET.ESAT","text":"ESAT(p_fu_TA)\n\nCalculate saturated vp (kPa) and DELTA=dES/dTA (kPa/K) from temperature based on Murray J Applied Meteorol 6:203 using as input pfuTA (air temperature in Â°C).\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.LWFBrook90_CANOPY-NTuple{8,Any}","page":"Function Documentations","title":"LWFBrook90.PET.LWFBrook90_CANOPY","text":"LWFBrook90_CANOPY()\n\nCompute evolution of plant parameters over the season.\n\nEcoshift\n\n\" Subroutine CANOPY calculates plant \"parameters\" that can vary with day of the year ( DOY).\n\nThe height of the canopy above any snowpack, h (HEIGHT), is\n\nHEIGHT = RELHIT * MAXHT - SNODEP\n\nwhere MAXHT is the maximum height for the year, which is an input parameter, and RELHIT is the relative height for the day of the year (doy), as obtained with function INTERP from the RELHT parameter array. HEIGHT is not allowed to be less than 0.01 m, which gives an appropriate roughness parameter for \"smooth\" surfaces. The snowpack depth (SNODEP, m) is the snow water content (SNOW, mm) divided by 1000 times snow density (SNODEN), which is assumed constant. Although snow density can actually vary from 0.05 to 0.5, the constant value is good enough to account for burying of the canopy in BROOK90. The RATIO of uncovered HEIGHT to total height (RELHT * MAXHT) is also calculated.\n\nActual projected leaf area index, Lp (LAI), is\n\nLAI = MAXLAI * RELLAI(DOY) * DENSEF * RATIO\n\nwhere MAXLAI is the maximum LAI for the year, RELLAI(DOY) is the relative LAI for the doy as obtained with function INTERP from the RELLAI parameter array, DENSEF is a thinning parameter between zero and one (see below). The use of RATIO assumes that LAI is distributed uniformly with height. LAI is prevented from being less than 0.00001 to avoid zero divides; this can cause small amounts of transpiration, which may be ignored.\n\nActual projected stem area index Sp (SAI), is assumed proportional to HEIGHT following Federer et al. (1996), so\n\nSAI = CS * HEIGHT * DENSEF\n\nwhere CS is a parameter that is the ratio of SAI to HEIGHT.\n\nTotal root length per unit area (RTLEN) is\n\nRTLEN = MXRTLN * RELHT * DENSEF\n\nwhere MXRTLN is the maximum root length for the year. Correction for seasonal RELHT assumes that root length increases proportionally with height growth.\n\nThe total plant resistance to water movement (RPLANT) is\n\nRPLANT = 1 / (MXKPL * RELHT * DENSEF)\n\nwhere MXKPL is the plant conductivity at maximum height growth. RPLANT is not allowed to be greater than 1E8 MPa d/mm, which is effectively infinite. Correction for seasonal RELHT assumes that canopy conductance increases proportionally with height growth.\n\nDENSEF is normally 1.0 in the above four equations. This parameter was included in the model as a convenient way to \"thin\" a canopy by removing a fraction of the plants. LAI, SAI, and RTLEN are all reduced proportionally to DENSEF, and RPLANT is increased. However DENSEF does NOT reduce HEIGHT because the remaining canopy still has the same height. Therefore DENSEF should NOT be set to 0 to simulate a clearcut as HEIGHT is unchanged and the aerodynamic resistances will be wrong. Probably DENSEF should not be less than 0.05. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.PM-NTuple{5,Any}","page":"Function Documentations","title":"LWFBrook90.PET.PM","text":"PM(AA, VPD, DELTA, RA, RC)\n\nCompute Penman-Monteith latent heat flux density, W/m2.\n\nEcoshift\n\n\" The Penman-Monteith equation is\n\nLv Ïw E = (Î (Rn-S) + c_p Ï Da / ra ) / (Î + Î³ + Î³ (rc/ra))\n\nwhere E is the evaporation rate in volume of water per unit land area per unit time, Lv is the latent heat of vaporization for water, Ïw is the density of water, Î is the rate of change of vapor pressure with temperature, Rn is the net radiation above the surface, S is the subsurface heat flux, cp is the heat capacity of air, Ïr is the density of air, Da is the vapor pressure deficit in the air, Î³ is the psychrometer constant, rc is the \"canopy resistance\", and ra is the aerodynamic resistance between the canopy and a reference height za at which Da is measured. The vapor pressure deficit, Da, is ea* - ea. The equation assumes that the vapor pressure at the effective evaporating surface, e0, is the saturated vapor pressure at the surface temperature. Then rc and ra are the two \"resistances\" through which water vapor passes as it moves down the vapor pressure gradient from e0 to ea. The canopy resistance, rc, represents resistance to flow of vapor through the stomates and cuticle of individual leaves and through the air around each leaf to some \"effective\" source height of water vapor in the plant canopy. The aerodynamic resistance, ra, is a measure of the turbulent transfer capability of the atmosphere between the effective source height and za. The Penman-Monteith equation is derived from the energy balance equation and the mass transfer equations for sensible and latent heat fluxes (e.g. Brutsaert 1982). \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.ROUGH-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.PET.ROUGH","text":"ROUGH()\n\nCompute canopy roughness height.\n\nEcoshift:\n\nROUGH obtains the roughness parameter, z0 , and the zero-plane displacement, d, based on canopy height, h, the projected leaf area index, Lp, and the projected stem area index, Sp. The methods used follow Shuttleworth and Gurney (1990) with some modifications. Shuttleworth and Gurney (1990) defined plant canopies as either \"closed\" or \"sparse\" based on whether Lp is greater or less than some arbitrary value Lpc, which they take as 4. Following Federer et al. (1996), BROOK90 defines a closed canopy as having Lp + Sp greater than Lpc + Spc, where Spc is taken as cs h, as described in the previous section. Spc is not reduced by DENSEF. RATIO is ( Lp + Sp ) / ( Lpc + Spc ) (this RATIO differs from RATIO in subroutine CANOPY). When RATIO is greater than or equal to 1, the canopy is \"closed\" and z0 and d are the values for a closed canopy.\n\nThe roughness parameter for closed canopies, z0c (Z0C), has been determined experimentally from wind profile data to be about 13% of h for relatively short canopies, but only 5% or less of h for some forests (Brutsaert 1982; Shuttleworth 1989). Following Federer et al. (1996) BROOK90 parameterizes the ratio z0c / h as follows: czs is the ratio for smooth surfaces with h less than hs; czr is the ratio for rough surfaces with h greater than hr; and for h between hs and hr, z0c is interpolated linearly between z0 = czs hs at h = hs and z0 = czr hr at h = hr. The effect of stems and branches is assumed to be included in z0c.\n\nThe zero-plane displacement of a closed canopy, dc (DISPC), is generally related to canopy height, h, and to z0c by\n\n(22) dc = h - z0c / 0.3\n\n(Monteith 1973; Shuttleworth and Gurney 1990).\n\nWhen h (HEIGHT) is small, it is possible for z0c to be less than z0g (Z0GS), which is the parameter giving roughness of the ground surface under the canopy. This impossible situation would cause problems later on. It is prevented by reducing z0g to the value of z0c, which works nicely because z0c is always added to dc.\n\nThe values of d and z0 for sparse canopies (RATIO < 1) are obtained by a modification of the method that Choudhury and Monteith (1988) developed from curves of Shaw and Pereira (1982). A drag coefficient per unit leaf area and stem area, cd (CDRAG), is calculated from z0c and dc as\n\n(23) cd = { -1 + exp [ 0.909 - 3.03 ( z0c / h ) ] } 4 / (Lpc + Spc) .\n\nThis assumes that a unit of Spc produces the same drag as a unit of Lpc. Then\n\n(24) d = 1.1 h ln { 1 + [ cd ( Lp + Sp ) ] 0.25 }.\n\nShuttleworth and Gurney (1990) also used this approach, but assumed a constant cd of 0.07, which is not appropriate when z0c / h is not 0.13.\n\nFor z0, Shuttleworth and Gurney (1990) chose between a sparse canopy equation and the closed canopy value of 0.3 (h - d), depending on a fixed value of cd Lp. However, that procedure leads to a step change at the transition. The step change is avoided by choosing the minimum of the two z0 values, as\n\n(25) z0 = min { 0.3 ( h - d ), z0g + 0.3 h [ cd ( Lp+ Sp) ] 0.5 }\n\nwhere z0g is the roughness parameter of the ground surface. When a snowpack is present, the value of z0g is replaced by the parameter Z0S before ROUGH is entered.\n\nThe reference height at which weather variables are known, za (ZA), is set to a fixed amount (ZMINH) above h. It thus is assumed to move up and down if h changes through the year.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.SRSC-NTuple{15,Any}","page":"Function Documentations","title":"LWFBrook90.PET.SRSC","text":"SRSC()\n\nCompute canopy surface resistance.\n\nEcoshift\n\n\" This routine obtains the canopy surface resistance, rsc, which is the classic canopy resistance in the Penman-Monteith equation, using the Jarvis (1976) expression for the factors that control the individual leaf resistance, r, and its reciprocal the leaf conductance, g.\n\nConfusion arises because r and g may be given on the basis of both total leaf surface area and projected leaf area. To straighten this out, consider that evaporation is the product of leaf conductance, g, in units of m3H2O m-2leaf s-1, and leaf area index, L, in units of m-2leaf m-2ground to give a canopy conductance in m3H2O m-2ground s-1. But the leaf area index can be given for projected leaf area, Lp, or for total leaf area, Lt. Similiarly, the conductance can be for projected leaf area, gp, or for total leaf area, gt. But the total evaporation must be the same, so gp Lp = gt Lt is required. In the literature, gt Lt is commonly used for needle-leaved plants and gp Lp for broadleaved plants. Following KÃ¶rner et al. (1979) BROOK90 uses gp Lp for all plants. For needles, where gt, or its reciprocal rt, is known, then gp = Ï tp gt = Ïtp / rt, where Ïtp = Lt / Lp. Note that Ïtp can vary from 2 for flat needles to Ï for cylindrical needles. For broad leaves, the leaf resistance is usually given separately as rb for the abaxial (lower) surface, and rd for the adaxial (upper) surface. Each of these is based on the one-sided area of the leaf or the projected leaf area index, so gp Lp = gb Lp + gd Lp = Lp ( 1 / rb + 1 / rd ). For amphistomatous leaves (stomates on both sides) the simplification gb = gd is often assumed, giving gp Lp = 2 gb. The factor of 2 can easily be confused with Ïtp = 2, but they are not the same. For hypostomatous leaves (stomates only on the abaxial side), gd = 0 is often assumed, giving gp Lp = gd Lp. BROOK90 uses only gp, which hereafter is called gl, and is independent of assumptions about how gp was obtained.\n\nStomates open and close in response to several external and internal variables. Jarvis (1976) proposed that the effects could be considered as multiplicative such that\n\n(26) gl = glmin + fT fD fR fW fC ( glmax - glmin )\n\nwhere gl is the leaf conductance, glmin is its minimum value (closed stomates), glmax is its maximum value, and fT, fD, fR, fW, and fC are reduction factors, varying between 0 and 1, that account for effects of temperature, vapor pressure deficit, radiation (light), leaf water stress, and atmospheric carbon dioxide concentration, respectively, on stomatal opening. This multiplicative expression has been widely used, though more by default and for simplicity than because of any extensive empirical testing. BROOK90 is not concerned with effects of changing atmospheric CO2 effects, so fC = 1 always.\n\nBROOK90 also always uses fw = 1. The resulting rsc is therefore appropriate to the definition of potential transpiration as occurring when soil water is at field capacity. Reduction of fw below 1 in response to drying soil would allow a direct calculation of actual transpiration using the Penman-Monteith or Shuttleworth-Wallace equations. However, BROOK90 does not do this; it simulates actual transpiration as the lesser of potential transpiration using fw = 1 and a supply rate controlled by the water potential gradient and plant resistance.\n\nOf the remaining three dependencies, the temperature response is the least well-documented. Jarvis (1976) proposed a skewed parabolic response, such that stomatal conductance is reduced both by low and high temperatures. BROOK90 uses a slightly simpler response consisting of an optimum temperature range with fT = 1 and inverted half parabolas to reduce fT to 0 at each end of the range, so\n\n(27)  fT = 0      Ta < TL fT = 1 - [ (T1 - Ta) / (T1 - TL) ]2         TL < Ta < T1 fT = 1 T1 < Ta < T2 fT = 1 - [ (Ta - T2) / (TH - T2) ]2     T2 < Ta < TH fT = 0      Ta > TH TL, T1, T2, and TH are all parameters. If T1 = T2, there is no optimum range. If TL = T1 and T2 = TH, fT is a square wave function. The use of mean daily temperature, Ta, here instead of some other temperature like minimum daily temperature is arbitrary. The actual temperature response is probably much more complex than this and involves acclimation.\n\nStomates are known to partially close in response to greater dryness of the air surrounding the leaf, though the mechanism is unclear. The dryness is expressed best by the vapor pressure difference between the leaf and its surrounding air, but as this is not generally known, the atmospheric vapor pressure deficit above the canopy, Da (VPD), is usually used. The error induced by using Da is certainly not larger than the uncertainty in the magnitude of the vapor deficit response for most species. Jarvis (1976) assumed a linear conductivity response, but Lohammar et al. (1980) suggest a linear resistance response such that\n\n(28) fD = cD / ( cD + Da )\n\nwhere cD (CVPD) is a constant, which is the Da at which fD = 0.5. This has the advantage of approaching 0 as an asymptote when Da is large.\n\nFor fR also, several functional forms have been used. BROOK90 uses the form given by Stewart (1988) in which fR = 1 when solar radiation incident on the leaf, RL, is equal to its nominal maximum value, Rm (1000 W/m2), so\n\n(29) fR = (Rm + R0) RL / [ Rm (R + R0) ]\n\nand R0 is a second parameter. A more convenient parameter than R0 is R.5, defined as the radiation level at which fR = 0.5. Then from (29)\n\n(30) R0 = Rm / [ ( Rm / R.5 ) - 2 ]\n\nFor most plants, the value of R.5 is relatively low, around 50 to 100 W/m2. In these expressions, the solar radiation at the leaf is used, whereas the stomatal opening is actually influenced by the photosynthetically active radiation. Use of solar radiation, RL, therefore assumes that the spectral distribution of the radiation does not change with depth into the canopy, which is incorrect (Federer and Tanner 1966, can't resist the opportunity to quote my ancient Ph.D. work here!).\n\nThe canopy conductance, gsc, which is the reciprocal of rsc, is the integral of gl over each increment of total leaf area in the canopy , dL' , so\n\nWith (26), where fT, fD, and glmax are all assumed constant through the canopy, (31) becomes\n\nwhere fR is the only variable that depends on location in the canopy.\n\nIntegration of fR requires an expression for the penetration of solar radiation into the canopy. A Beer's Law or exponential extinction is commonly used, such that the average radiation flux density on the leaf surface, RL, at any level in the canopy depends on the projected leaf area, L', and projected stem area, S', above that level, as follows:\n\n(33) RL = CR R exp [ -CR ( L' + S' ) ]\n\nwhere CR is the extinction coefficient and R is the solar radiation at the top of the canopy. The first CR accounts for leaf inclination assuming random azimuthal distribution (Monteith 1973, Campbell 1977, Shuttleworth and Gurney 1990). The S' term was added by Federer et al. (1996) and assumes that a unit of projected leaf area and a unit of projected stem area have the same absorption effect. Assuming that only half of Sp is distributed proportionally to L' (and the other half is below the leaves in a \"stem space\"), then L' + S' = L' + (L'/Lp)(Sp/2) = fs L' where fs = (Lp + Sp/2) / Lp. The integral in (32) using (29) and (33) is then\n\nwhich corresponds to Shuttleworth and Gurney (1990) and Saugier and Katerji (1991) when Sp =\n\nThe combination of (32) and (34) provides the value of rsc (RSC)\n\n\"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.SWGE-NTuple{8,Any}","page":"Function Documentations","title":"LWFBrook90.PET.SWGE","text":"SWGE()\n\nCompute ground evaporation rate (mm/d) using Shuttleworth-Wallace with known transpiration.\n\nEcoshift\n\n\" The Shuttleworth-Wallace approach incorporates the energy tradeoff between transpiration and soil evaporation. When transpiration is reduced by low availability of soil water or is zero, BROOK90 uses the new value of transpiration, Ec (ARATE), in subroutine SWGE to get a new value of soil evaporation, Es (ERATE). With Ec known, substituting (5) into (4) and (4) into (2) and solving for Lv Ïw E gives (14) ... then (15) Lv Ïw Es = Lv Ïw E - Lv Ïw Ec \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.SWGRA-NTuple{13,Any}","page":"Function Documentations","title":"LWFBrook90.PET.SWGRA","text":"SWGRA()\n\nCompute Shuttleworth - Wallace - Gurney Aerodynamic Resistances.\n\nEcoshift\n\n\" Shuttleworth - Wallace - Gurney Aerodynamic Resistances The three SW aerodynamic resistances, raa, ras, and rac are obtained in subroutine SWGRA by the methods of Shuttleworth and Gurney (1990). The derivations of their equations are not given here.\n\nThe friction velocity, u*, is first obtained from the classic logarithmic wind profile as\n\n(16) u* = k ua / ln [ ( za - d ) / z0 ]\n\nwhere ua is the wind speed at the reference height, za, z0 is the surface roughness parameter, d is the zero-plane displacement, and k is the von Karman constant. The roughness parameter is a measure of the turbulence-inducing properties of the surface. The zero-plane displacement, d, arises because the height of the effective canopy surface is above the ground surface that is taken as zero height. Both z0 and d are obtained in subroutine ROUGH . This u* equation strictly only applies for neutral atmospheric stability. Corrections for non-neutral stability are well-known (Brutsaert 1982), but are not usually considered where the objective is to evaluate PE for periods of a day and are not used in BROOK90.\n\nShuttleworth and Gurney (1990) assume that the classic logarithmic wind profile applies above the canopy and that an exponential profile applies within the canopy. As the canopy becomes sparser, they further assume that the effective source height of the energy fluxes remains at the same height as for a closed canopy, Dc = z0c + dc; these values are obtained in subroutine ROUGH. The ground to source height resistance, ras, is obtained by integrating the exponential eddy diffusivity from 0 to Dc to give\n\n(17) ras = [ h exp(n) / n Kh] [exp( -n z0g / h ) - exp( -n Dc / h ) ]\n\nand the source height to reference height resistance, raa, is obtained by integrating from Dc to za as\n\n(18) raa = ln [ ( za - d ) / ( h - d ) ] / k u* + ( h / n Kh ) { -1 + exp[ n (h - Dc) / h ] }\n\nwhere n is the extinction coefficient for eddy diffusivity, z0g is the roughness parameter of the underlying ground surface, and the eddy diffusivity at the canopy height, h, is\n\n(19) Kh = k u* (h - d).\n\nThe exponential wind profile and the derived K(z) are known to be incorrect in canopies of intermediate leaf area index, but a better model is not yet available (Choudhury and Monteith 1988).\n\nThe leaf to zero plane resistance, rac, is assumed by Shuttleworth and Gurney (1990) to be a sum of the individual leaf laminar boundary layer conductances, so\n\n(20) rac = ( n / ab ) ( w / uh )1/2 / { Ï tp Lp [ 1 - exp( -n / 2 ) ] }\n\nwhere n is the extinction coefficient for eddy diffusivity, ab is a constant = 0.01 m/s0.5 (Campbell 1977), Ïtp is the ratio of projected leaf area to total leaf surface area, Lp is the projected leaf area index, w is the representative leaf width in m, and uh is the wind speed in m/s at the top of the canopy. (Note that Shuttleworth and Gurney (1990) should have n in the numerator, not the denominator.) The rac equation strictly applies only to flat leaves and needles, not to cylindrical needles; but rac is small when w is small so this inaccuracy is negligible. The canopy-top wind speed, uh, is\n\n(21) uh = (u* / k) ln [ ( h - d ) / z0 ].\n\nIn the Shuttleworth and Gurney equation, rac goes to infinity as Lp goes to zero, but this neglects the contribution of stems and branches to interception loss, especially when Lp =\n\nAlthough the rac equation is specifically for leaves with width w, subroutine SWGRA uses\n\n(Ïtp Lp + Ï Sp) for r tp Lp in equation (20), where Sp is the projected stem area index, defined analagous to Lp as the ratio of projected surface area of stems and branches to ground area (Federer et al. 1996). This assumes that a unit of stem surface has the same influence on rac as a unit of leaf surface. To avoid zero divides when Sp = 0, Lp is prevented from being less than 0.00001.\n\nThe Shuttleworth - Gurney separation of rac and rsc at the canopy level rather than at the leaf level is theoretically incorrect. In reality, the leaf boundary layer resistance and the leaf diffusion resistance are in series on each side of flat leaves (Jarvis and McNaughton 1986). The two resistances should be summed over each side of the leaf before integrating over the canopy, but this is too complicated for practical application (Choudhury and Monteith 1988). \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.SWPE-NTuple{9,Any}","page":"Function Documentations","title":"LWFBrook90.PET.SWPE","text":"SWPE(AA, ASUBS, VPD, RAA, RAC, RAS, RSC, p_fu_RSS, DELTA)\n\nCompute Shuttleworth and Wallace (1985) transpiration and ground evaporation.\n\nEcoshift\n\n\" Shuttleworth and Wallace (1985) (SW) modified the Penman-Monteith method to account separately for the different water vapor and sensible heat pathways from the soil and from the leaves. Instead of the two resistances of equation (1), rc and ra, SW define five: rsc, raa, rac, ras, and rss. Resistances rsc and rac are in the transpiration pathway while rss and ras are in the soil evaporation pathway and raa is common to both. The canopy surface resistance, rsc, is the resistance to movement of water vapor out of the leaves. The resistance rac restricts vapor movement from the leaf surfaces to the effective source height for water vapor in the canopy. The resistance between the source height and a reference height above the canopy is raa, which corresponds to ra in equation (1). The reference height is that at which air temperature, humidity, and wind speed are known. The resistance to movement of water vapor from inside the soil to the soil surface is rss. The resistance to vapor movement from the soil surface to the source height is ras. The resistances rac, ras, and raa are assumed also to apply to sensible heat transfer.\n\nShuttleworth and Wallace (1985) start with\n\n(2) Lv Ïw E = Lv Ïw Ec + Lv Ïw Es\n\nwhere Ec is transpiration and Es is soil evaporation, then write an equation similar to (1) for each term\n\nwhere D0 is the vapor pressure deficit at the effective source height, A is Rn - S or the available energy above the canopy, and As is Rns - S or the available energy at the ground. From the relationships of sensible and latent fluxes to the gradients and resistances, and using the definition of Î, Shuttleworth and Wallace obtain\n\n(5) D0 = Da + raa [Î A - (Î + Î³) Lv Ïw E ] / cpÏ\n\nAlgebraic manipulation of (2), (3), and (4) to eliminate D0 leads to:\n\n(6) Lv Ïw E = Cc Mc + Cs Ms\n\nwhere\n\n(9) Cc = 1 / { 1 + Rc Ra / [ Rs ( Rc + Ra ) ] }\n\n(10) Cs = 1 / { 1 + Rs Ra / [ Rc ( Rs + Ra ) ] }\n\nwith\n\n(11) Ra = (Î + g) raa\n\n(12) Rs = (Î + Î³) ras + Î³ rss\n\n(13) Rc = (Î + Î³) rac + Î³ rsc\n\nAlthough the algebra appears complicated, these equations for the first time provide a PM-type theory that includes both transpiration and soil evaporation. The total evaporation, E, must be obtained from (6) first, then D0 from (5), before the two components can be calculated from (3) and (4). Subroutine SWPE includes equations (3) through (13), more or less in reverse order.\n\nThe outputs Ec (PRATE) and Es (ERATE) from SWPE are in units of mm/d whereas LvÏw E in (1) is output as W m-2 from function PM. The conversion is ETOM * WTOMJ . \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.WEATHER-NTuple{14,Any}","page":"Function Documentations","title":"LWFBrook90.PET.WEATHER","text":"WEATHER()\n\nCompute solar radiation, temperature and wind speed.\n\nEcoshift\n\nWEATHER includes all adjustments of input weather data, including separation into daytime and nighttime values.\n\nIf daily solar radiation (SOLRAD) is input as zero, it is estimated as 0.55 * I0HDAY, or 55% of the potential solar radiation for the doy and location. The 0.55 value is an overall generalization for the United States, where values range from 0.50 in the east to 0.60 in the west (U.S. Department of Commerce 1968). As of Version 4.8 this value can be changed on the BROOK90 main window.\n\nIf vapor pressure (EA) is input as zero, it is estimated as the saturated vapor pressure at the minimum daily temperatire (TMIN) using subroutine ESAT.\n\nIf daily average wind speed at a weather station (UW) is input as zero, it is estimated as 3 m s-1. This is a surprisingly good approximation for most weather stations in the United States at all seasons of the year (U.S. Department of Commerce 1968). For other default values, enter the value as UA for each day in the data file. Note: measured values of zero wind speed should be entered as 0.1.\n\nThe average temperature for the day (TA) is taken as the average of the input maximum and minimum temperatures (TMAX and TMIN). Daytime (TADTM) and nighttime (TANTM) average temperatures are calculated by assuming a sine wave variation between TMAX and TMIN. Integration leads to\n\nTADTM = TA + [ (TMAX - TMIN) / (2 Ï DAYLEN) ] sin( Ï DAYLEN )\n\nTANTM = TA - { (TMAX - TMIN) / [2 Ï (1 - DAYLEN)] } sin( Ï DAYLEN )\n\nwhere DAYLEN is the solar daylength determined in subroutine SUNDS.\n\nFor wind speed, a parameter, WNDRAT, defines the average ratio of nighttime wind speed (UANTM) to daytime wind speed (UADTM). The default value for WNDRAT is 0.3 based on Hubbard Brook data.\n\nUADTM = UA / [ DAYLEN + (1 - DAYLEN) WNDRAT ]\n\nUANTM = WNDRAT * UADTM\n\nwhere UA is the daily average wind speed at height za.\n\nTA, UA, and the vapor pressure, EA, which is assumed constant over the day, are all theoretically the values at the reference height above the canopy (ZA) . In practice, these values are rarely measured above the canopy of interest, but are usually from some relatively nearby weather station. Any attempt to theoretically adjust TA and EA would require some information on their profiles, such as surface temperature and vapor pressure, which are not known. So BROOK90 assumes that TA and EA are the same at the weather station and at za. However, UA can be estimated from wind speed at the weather station (UW) because wind speed extrapolates to zero at height z0 + d over both surfaces. This adjustment is done in function WNDADJ. UW is prevented from being less than 0.2 m s-1.\n\nSubroutine WEATHER could be modified to do further adjustments to temperature, vapor pressure, and wind. For instance, an elevation adjustment to temperature could be added, using the average environmental lapse rate of -0.6Â°C / 100m.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.PET.WNDADJ-NTuple{6,Any}","page":"Function Documentations","title":"LWFBrook90.PET.WNDADJ","text":"WNDADJ(p_fu_ZA, p_fu_DISP, p_fu_Z0, p_FETCH, p_ZW, p_Z0W)\n\nCompute ratio of wind speed at reference height (above canopy) to wind speed at weather station.\n\nEcoshift\n\n\" This function estimates the wind speed (UA) at reference height ZA above the canopy from input wind speed at a remote weather station (UW). Assume that the weather station represents a new surface downwind that has a roughness of z0w (Z0W) and a fetch of F (FETCH). Brutsaert (1982) gives the height of the internal boundary layer, zb, as\n\nz_b = 0334 F^0875 z_0w^0125\n\nFor logarithmic wind profiles over both surfaces to have the same wind speed at zb,\n\nu_a = u_w left( frac\n    log(z_bz_0w) log((z_a-d)z_0)\n    \n    log(z_bz_0) log(z_wz_0w)\n     right)\n\nwhere zw (ZW) is the height of wind measurement at the weather station (Federer et al. 1996) and d (DISP) is the zero-plane displacement of the canopy. This assumes that the weather station is over a smooth surface so its zero plane displacement can be ignored. If the parameter Z0W is set to zero, then no adjustment is made and ua = uw. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SNO.SNOENRGY-NTuple{10,Any}","page":"Function Documentations","title":"LWFBrook90.SNO.SNOENRGY","text":"SNOENRGY(p_fu_TSNOW, p_fu_TA, p_fT_DAYLEN, p_CCFAC, p_MELFAC, p_fT_SLFDAY, p_fu_LAI,\np_fu_SAI, p_LAIMLT, p_SAIMLT)\n\nCompute energy flux density to snow surface, MJ m-2 d-1.\n\nEcoshift\n\n\" The energy flux density to the snow surface (SNOEN, MJ m-2 d-1) is calculated in subroutine SNOENRGY independently of precipitation for the day.\n\nWhen TA is <= 0Â°C, SNOEN is the energy used to heat or cool the snowpack\n\nSNOEN = CCFAC * 2 * DAYLEN * (TA - TSNOW)\n\nwhere CCFAC is an input parameter, and DAYLEN is the daytime fraction of a day. CCFAC is the below-zero degree-day factor for a day with a daylength of 0.5 d. Anderson (1973) pointed out that this degree-day factor appears to vary seasonally. In BROOK90, this seasonality is incorporated by using 2 * DAYLEN as a multiplier in the above equation. BROOK90 is not very sensitive to CCFAC unless it is close to 0; larger values of CCFAC make the snow melt later because the snowpack cools more. When CCFAC = 0, snow temperature is always 0Â°C and there is never any cold content.\n\nWhen TA is greater than 0Â°C, energy is provided that can melt snow, and SNOEN is calculated differently. The energy supply rate, SNOEN, is then\n\nSNOEN = MELFAC * 2 * DAYLEN * SLFDAY * TA * exp(-LAIMLT * LAI - SAIMLT * SAI)\n\nwhere MELFAC is the melting degree-day factor for a day with a daylength of 0.5 d and no canopy, SLFDAY is the ratio of potential insolation on the slope to that on a horizontal surface, and the input parameters LAIMLT and SAIMLT express the dependence of SNOEN on leaf area index (LAI) and stem area index (SAI). MELFAC uses 0Â°C as a base and is zero for TA below this. Inclusion of SLFDAY in the MELT equation arises from an assumption that radiation melt plays an important role. If this is not so, then SLFDAY multiplier could be omitted, and snowmelt would not depend on slope-aspect. The functional forms of the SAI and LAI dependencies are based on the somewhat arbitrary curves used by Federer and Lash (1978). \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SNO.SNOFRAC-Tuple{Any,Any,Any}","page":"Function Documentations","title":"LWFBrook90.SNO.SNOFRAC","text":"SNOFRAC(p_fT_TMAX, p_fT_TMIN, p_RSTEMP)\n\nSeparate RFAL from SFAL.\n\nEcoshift\n\n\" Separation of daily precipitation into snow or rain is a major problem in hydrologic modeling. For instance, if the wrong precipitation form is chosen in December, simulated streamflow from that day's precipitation could be shifted from December to April or vice versa, a rather significant effect! BROOK90 uses both daily maximum (TMAX) and daily minimum (TMIN) temperatures to allow days on which mixed rain and snow falls. This reduces the potential error from making the wrong choice. The algorithm seems to have been stated first by Willen and Shumway (1971). When TMAX for the day is greater than the parameter RSTEMP and TMIN is less than RSTEMP, the fraction of precipitation as snow, SNOFRC, is\n\nSNOFRC = (RSTEMP - TMIN) / (TMAX - TMIN)\n\nwhere RSTEMP is the \"base\" temperature for the rain-snow transition. When TMAX < RSTEMP, SNOFRC = 1; when TMIN > RSTEMP, SNOFRC = 0. The default value of RSTEMP is -0.5Â°C because that seems to work best at Hubbard Brook. If precipitation is input more than once a day, the same SNOFRC is used for all precipitation intervals. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SNO.SNOVAP-NTuple{17,Any}","page":"Function Documentations","title":"LWFBrook90.SNO.SNOVAP","text":"SNOVAP(p_fu_TSNOW, p_fu_TA, p_fT_EA, UA, p_fu_ZA, p_fu_HEIGHT, p_fu_Z0, p_fu_DISP,\np_fu_Z0C,p_fu_DISPC, p_fu_Z0GS, p_LWIDTH, p_RHOTP, p_NN, p_fu_LAI, p_fu_SAI, p_KSNVP)\n\nCompute potential snow evaporation (mm/d).\n\nEcoshift\n\n\" Evaporation rate from the snowpack, and its negative, condensation, are evaluated using the aerodynamic flux equation\n\nE = (cp Ï / g Ls rw ) (e0 - ea) / (raa + ras)\n\nwhere ea is the vapor pressure of the air, e0 is the surface vapor pressure, and raa and ras are the Shuttleworth-Wallace resistances described in section PET. The constants cp Ï (CPRHO), Î³ (GAMMA), and the latent heat of sublimation Ls Ïw (LS) are constant. BROOK90 assumes that the snowpack is always isothermal and that its temperature does not change diurnally. When the snowpack temperature (TSNOW) is less than 0Â°C, the surface vapor pressure, e0, is the saturated vapor pressure at TSNOW and is obtained by calling subroutine ESAT. When TSNOW is 0Â°C, e0 is 0.61 kPa; use of Ls instead of the latent heat of vaporization, Lv, in this case is slightly wrong. The vapor pressure ea (EA) is the input vapor pressure at reference height za . The resistances raa and ras are obtained from subroutine SWGRA using the daily average wind speed (UA). The value of E in mm/d returned from SNOVAP is called PSNVP because it can be reduced in SNOWPACK if snow disappears.\n\nFor evaporation from snow in the open, U.S. Army Corps of Engineers (1956) gives\n\nE = 1.9 ua (e0 - ea)\n\nfor evaporation in the open. This yields E = 0.6 mm when ua = 3 m/s and the vapor pressure difference is 0.1 kPa. The two E equations are the same when ras = 0, za - d = 2 m, and z0 = 1 mm. Subroutine SWGRA thus gives the appropriate raa for snow in the open.\n\nColbeck et al. (1979) state \"Evaporation from the snow in a forest has received a great deal of attention, with many investigators concluding that it is small.... Although there are many reports of high evaporative losses from forests, these have not been verified from heat balance considerations.\" Generally, literature values are around 0.5 mm/d in the open, with monthly values around 10 mm and annual values of 20 mm or more. Anderson (1976) gives 15-20 mm annually for Sleepers River, VT.\n\nThe modified Shuttleworth and Gurney resistance formulations in subroutine SWGRA for a leafless tall canopy give raa about 3 s/m and ras about 40 s/m for a weather station wind speed of 3 m/s. A common vapor pressure difference of 0.1 kPa then gives a very high evaporation of 1.6 mm/d or 50 mm/ month. The problem may be that the resistances calculated by SWGRA are too small, either because of too large a roughness parameter for leafless deciduous forests, or because stability effects are ignored. To fix the problem BROOK90 includes KSNVP, which is an arbitrary constant multiplier of PSNVP. Use KSNVP = 1.0 for open open areas or short canopies normally covered by snow; but for forest, KSNVP of 0.3 gives more reasonable values of SNVP. More work is obviously needed on amount and theory of snow evaporation under forests.\n\nNote that although evaporation and condensation of water are simulated in SNOVAP, the accompanying latent transfer is not simulated. The snow energy balance in subroutine SNOENRGY is (unfortunately) decoupled from the snow evaporation-condensation process. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.SNO.SNOWPACK-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.SNO.SNOWPACK","text":"SNOWPACK(p_fu_RTHR, p_fu_STHR, p_fu_PSNVP, p_fu_SNOEN, u_CC, u_SNOW,\nu_SNOWLQ, p_DTP, p_fu_TA, p_MAXLQF, p_GRDMLT)\n\nUpdate status of snowpack.\n\nEcoshift\n\n\" In each precipitation interval, throughfall of rain (RTHR) and throughfall of snow (STHR) are calculated and subroutine SNOWPACK is entered if there is STHR or if there is SNOW. This subroutine adds throughfall to the snowpack, subtracts groundmelt, snow evaporation, and drainage of liquid water, and calculates the new cold content (CC) and liquid water content (SNOWLQ) of the snowpack. There are a number of different ways to program all this adding and subtracting of energy and water. The program flow of SNOWPACK has been selected to make the many realizable situations as clear as possible. Much shorter algorithms could have been used, but at the expense of clarity. Any alterations to this routine must be made carefully, keeping all the possibilities in mind. However, unlike routine SNOENRGY, the content of the SNOWPACK routine is essentially standard for all snow models and alterations generally should not be necessary.\n\nIn SNOWPACK, snow throughfall (STHR) is first added to SNOW. If TA is <0Â°C, the cold content of the new snow is increased by\n\nCC = CC - CVICE * TA * STHR * DTP\n\nwhere DTP is the precipitation interval time step and CVICE is the volumetric heat capacity of ice. If this addition of cold snow causes both cold content (CC) and liquid water (SNOWLQ) to coexist, then liquid water is refrozen; CC is used to refreeze part or all of the liquid.\n\nGroundmelt (GRDMLT) and snow evaporation-condensation are dealt with next. In the precipitation time interval (DTP), the fraction of the snowpack that melts by groundmelt and evaporates is\n\nFRAC = (GRDMLT + PSNVP) * DTP / SNOW.\n\nIf FRAC is > 1 then all the snow melts and evaporates at rates proportional to GRDMLT and PSNVP. If FRAC is < 1, SNVP is equal to potential snow evaporation (PSNVP) and GRDMLT drains from the snowpack as snowmelt (SMLT). An assumption is made that evaporation and groundmelt remove any liquid water and cold content that is associated with the snow removed, so SNOW, SNOWLQ, and CC are all reduced by 1 - FRAC. If PSNVP is negative, condensation is occurring; SNOW, SNOWLQ, and CC are correspondingly increased. This is simple, but not quite accurate. If no snow is left the routine ends.\n\nThe amount of snowpack warming or cooling is calculated next. The equivalent amount of ice melted by the energy input from SNOEN and the heat included in any warm rain is\n\nEQEN = DTP * (SNOEN + RTHR * RMAX(TA, 0) * CVLQ) / LF\n\nwhere CVLQ is the specific heat of water, and LF is the latent heat of fusion of water. Both CVLQ and LF are constant. When EQEN is less than 0, the snow is cooling; first any SNOWLQ is refrozen, then CC is increased. CC is not allowed to be reduced so that TSNOW is below the mean daily air temperature, TA, although it may remain colder, i.e. if TA < 0Â°, CC can only be reduced to TSNOW = TA. When EQEN is greater than 0, the snow is warming; first CC is reduced, then SNOWLQ is produced, and finally melt (SMLT) occurs.\n\nFinally, any rain throughfall (RTHR) is added to the snowpack. If any CC exists it refreezes rain until the CC is \"used up\". Any additional rain then increases SNOWLQ; when the maximum SNOWLQ is reached, the input of rain to the snow (RSNO) has also reached its maximum. In all cases the final results are a new SNOW, new SNOLQ and CC, and a value of RSNO.\n\nMSBPREINT then calculates the rain passing through the snow (RNET) as\n\nRNET = RTHR - RSNO.\n\nWhen SNOW exists at the beginning of the day, soil evaporation (SLVP) is zero. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.EVP.INTER-NTuple{10,Any}","page":"Function Documentations","title":"LWFBrook90.EVP.INTER","text":"INTER(p_fT_RFAL, p_fu_PINT, p_fu_LAI, p_fu_SAI, p_FRINTL, p_FRINTS, p_CINTRL, p_CINTRS, p_DTP, u_INTR)\n\nCompute rain catch rate (interception) and evaporation rate of intercepted rain in mm/d.\n\nRain interception, used when p_NPINT > 1.\n\nArguments\n\np_fT_RFAL: rainfall rate, mm/d\np_fu_PINT: potential interception rate, mm/d\np_fu_LAI: projected leaf area index, m2/m2\np_fu_SAI: projected stem area index, m2/m2\np_FRINTL: intercepted fraction of pfTRFAL per unit pfuLAI\np_FRINTS: intercepted fraction of pfTRFAL per unit pfuSAI\np_CINTRL: maximum interception storage of rain per unit pfuLAI, mm\np_CINTRS: maximum interception storage of rain per unit pfuSAI, mm\np_DTP: precipitation interval time step, d\nu_INTR: intercepted rain storage, mm,\n\nEcoshift:\n\nOlder studies of rain and snow interception regressed throughfall on precipitation, but such interpretation ignored the fact that energy supply rather than water supply may limit interception and also ignores storm duration/intensity and interstorm interval. Detailed simulation models of rain interception over time through a storm have been developed (Rutter et al. 1972) but these are too complex to include in a hydrologic model like BROOK90. Much less is known about the complicated process of evaporation of intercepted snow.\n\nSubroutine INTER accounts in the simplest way for the concepts of catch rate, evaporation rate, and canopy capacity. The same algorithm is applied to both rain and snow, which are considered to behave independently with respect to their interception. INTER is used when precipitation data are input more than once a day in a precip. interval file (PINT > 1). If only daily precipitation is input, then the modified procedure of INTER24 is used.\n\nThe conservation of mass equation for rain interception can be written as\n\ndS/dt = C - I - D\n\nwhere S is the amount of water stored on the canopy (mm), C is the catch rate, or rate of water input to the canopy, I is the rate of evaporation of intercepted water, and D is the drip rate, or rate of transfer of liquid water to the ground. The same equation applies to snow or mixed snow and rain, when any solid-liquid phase change is ignored and D includes all rain or snow blowing or falling from canopy to ground.\n\nBROOK90 ignores D by defining C as a net catch rate (C - D), or only the portion of the catch that will sooner or later evaporate, so, from the Flow Chart,\n\nd INTR / dt = RINT - IRVP\n\nfor rain, and\n\nd INTS / dt = SINT - ISVP\n\nfor snow, where INTR and INTS are the canopy storages, RINT and SINT are the net catch rates, and IRVP and ISVP are the evaporation rates, for rain and snow respectively.\n\nBROOK90 assumes that interception catch rates, RINT and SINT, are a constant fraction of rainfall or snowfall until the canopy reaches a storage capacity. Until the capacity is reached, RINT and SINT are assumed to be linear functions of LAI and SAI, so that\n\nRINT = (FRINTL * LAI + FRINTS * SAI) * RFAL\n\nand\n\nSINT = (FSINTL * LAI + FSINTS * SAI) * SFAL\n\nwhere RFAL and SFAL are rainfall rate and snowfall rate as determined from subroutine SNOFRAC, FRINTL and FSINTL are the catch fraction per unit LAI for rain and snow, respectively, and FRINTS and FSINTS are the catch fraction per unit SAI for rain and snow, respectively.\n\nThe canopy has capacities or maximum values of INTR and INTS that depend on LAI and SAI. In BROOK90 these dependencies are assumed linear. The parameters CINTRL and CINTRS are the capacities for intercepted rain per unit LAI and SAI respectively, so that INTRMX, the capacity for rain, is\n\nINTRMX = CINTRL * LAI + CINTRS * SAI.\n\nFor snow,\n\nINTSMX = CINTSL * LAI + CINTSS * SAI,\n\nand the capacity parameters are generally larger than for rain. The eight interception parameters, FRINTL, FRINTS, FSINTL, FSINTS, CINTRL, CINTRS, CINTSL, and CINTSS, only control interception loss in small storms; interception loss in large storms is controlled by the evaporation rate of intercepted water (PINT) and the storm intensity and duration.\n\nThe rate at which intercepted water evaporates (PINT) is calculated from the Shuttleworth-Wallace equations by calling subroutine SWPE (Section PET) with the canopy resistance rc = 0. The soil surface resistance (RSS) is not reduced for the PINT calculation. The MSBDAYNIGHT routine does this separately for daytime and for nighttime weather variables and the results are weighted by daylength (DAYLEN) to produce PINT. PINT is considered to be constant throughout the daily time step; its actual diurnal variation is ignored.\n\nThe canopy is considered to be either completely wetted or completely dry. Partial canopy wetting and drying is not treated in BROOK90, though it is a key component of specific models of the interception process (Rutter et al. 1972). Subroutine INTER determines the actual catch rate (RINT or SINT) and the actual evaporation rate (IRVP or ISVP) for the precipitation time step in the three cases that the canopy dries during the timestep, the canopy wets but does not reach capacity, and the canopy reaches capacity. The routine appropriately handles the case of a wet canopy with decreasing capacity because of decreasing LAI or SAI by allowing RINT or SINT to be negative.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.EVP.INTER24-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.EVP.INTER24","text":"INTER(p_fT_RFAL, p_fu_PINT, p_fu_LAI, p_fu_SAI, p_FRINTL, p_FRINTS, p_CINTRL, p_CINTRS, p_DTP, u_INTR)\n\nCompute rain catch rate (interception) and evaporation rate of intercepted rain in mm/d.\n\nRain interception with duration in hours, used when p_NPINT = 1. Same routine is used for snow interception, with different calling variables.\n\nArguments:\n\np_fT_RFAL: 24-hour average rainfall rate, mm/d\np_fu_PINT: potential interception rate, mm/d\np_fu_LAI: projected leaf area index, m2/m2\np_fu_SAI: projected stem area index, m2/m2\np_FRINTL: intercepted fraction of pfTRFAL per unit pfuLAI\np_FRINTS: intercepted fraction of pfTRFAL per unit pfuSAI\np_CINTRL: maximum interception storage of rain per unit pfuLAI, mm\np_CINTRS: maximum interception storage of rain per unit pfuSAI, mm\np_DURATN: average storm duration, hr\nu_INTR: intercepted rain storage, mm,\nMONTHN: Month of the year\n\nEcoshift:\n\n\" Subroutine INTER24 - daily interception Proper representation and integration of the interception process is a problem for hydrologic models that use a daily interval for precipitation input (p_NPINT = 1), because the storm duration is not known. For a brief, intense storm, the canopy wets once and the interception loss is limited primarily by canopy capacity. For a low intensity, all day storm, the canopy stays wet and the interception loss is limited primarily by the potential interception, PINT. This problem is worst when only daily precipitation is known, and decreases as precipitation is given at shorter intervals.\n\nSubroutine INTER24 was developed because the use of subroutine INTER for daily precipitation consistently produced too much interception. INTER24 is a modification of INTER that loops through the procedure every hour,using the PINT rate for each hour. DURATN is a parameter that specifies the average hourly duration of precipitation for each month of the year. INTER24 truncates DURATN to the next lower even integer, and then centers the \"storm\" on noon. Thus if DURATN is input as 7.5, the daily precipitation is assumed to occur at a constant rate from time 0900 to 1500. Centering on noon is only used to see how much interception carries over into the next day. The algorithm for each hourly loop is the same as for INTER, except that rates are in mm/hr and amounts are summed over the day. The interception catch rate (RINT or SINT), and the evaporation rate (IRVP or ISVP) are returned to MSBPREINT as average rates over the day.\n\nTo determine appropriate values of DURATN I examined hourly precipitation data for 4 years (one year at Hubbard Brook) from the SAMSON data set. Averaging the number of hours per day of precipitation of 0.02 inch (0.5 mm) or greater over days with such precipitation gave the following results after a little smoothing\n\n                    J   F   M   A   M   J   J   A   S   O   N   D\nSan Juan PR         3   2   2   2   2   2   2   3   3   3   3   3\nAtlanta GA          5   5   5   5   4   4   3   3   4   4   5   6\nCaribou ME          4   4   5   5   4   4   4   4   4   6   6   5\nMadison WI          4   4   5   3   3   2   3   3   4   4   5   5\nLake Charles LA     5   4   3   3   3   3   2   2   3   3   4   5\nPhoenix AZ          4   4   4   4   4   2   2   2   2   2   4   4\nRapid City SD       3   3   3   4   4   3   2   2   2   2   4   4\nTacoma WA           6   6   5   4   4   4   4   4   4   4   6   6\nFairbanks AK        3   3   4   4   4   4   3   3   4   4   4   3\nHubbard Brook NH    5   5   5   4   4   4   4   4   4   5   5   5\n\nApparently a default DURATN of 4 hours is appropriate for all months anywhere in the U.S. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.EVP.PLNTRES-NTuple{10,Any}","page":"Function Documentations","title":"LWFBrook90.EVP.PLNTRES","text":"PLNTRES()\n\nAllocates total plant resistance to xylem and root layers.\n\nEcoshift: Subroutine PLNTRES is called at the beginning of each day to obtain resistivities to liquid water flow: rhizosphere resistivity for each soil layer, root resistivity in each soil layer, and xylem resistivity. These parameters, together with soil water potential in each layer (PSITI) and critical plant water potential (PSICR) control the supply of water to transpiring leaves and thus the reduction of actual transpiration below potential transpiration. As defined by Hunt et al. (1991) the resistances used here are \"potential difference resistivities\", because the transpiration flux rate is in units of mm/d and the potential gradient is in MPa. The resistivities have units of MPa d mm-1.\n\nIn most of this subsection and the following subsection (TBYLAYER), algebraic notation is used instead of variable names. The correspondence is:\n\nrri RROOTI()    Ït  PSIT    P   PTR fi  RTFRAC rx  RXYLEM  Ïti PSITI() T   ATR Di  D() rp RPLANT  Ïc  PSICR   Ti  ATRANI()    Li  RTDENI ri  RI          S   SUPPLY  Î´i  DELT rt  RT Î±i  ALPHA() The following additional parameters or constants are input to the routines\n\nfx  FXYLEM  di  RELDEN  Ïwg RHOWG R1  RTRAD   d   DISPC   Ï   PI Lr  RTLEN   Ki  KK()\n\nSeveral other algebraic variables occur in the derivations below, but are not needed in the program.\n\nIf soil water potential is uniform through the root zone and rhizosphere resistivity is negligible, a bulk plant resistivity, rp, can be defined by\n\nrp = ( Ït - Ï - Ïw gd ) / T'\n\nwhere T' is the transpiration rate, Ït is the soil water potential, and Ï is the leaf water potential. The Ïwgd term is the gravity potential difference above the ground surface, where Ïwg is the density of water times the acceleration of gravity, and d is the effective height of canopy evaporation, taken here as the closed canopy zero-plane displacement (DISPC). Change in water storage within the plant is ignored in BROOK90, as Hunt et al. (1991) have shown that it does not matter to total daily transpiration.\n\nIn BROOK90, rp is determined primarily by the maximum bulk plant conductivity (MXKPL), which is an input parameter. MXKPL is the water uptake rate for a closed canopy per unit of soil to leaf potential difference. When the soil is wet so Ït is close to 0, many plants have a Ï of around -1.5 MPa when transpiration rate is about 0.5 mm/hr, a normal midday rate for a sunny day in temperate regions. This gives a MXKPL of 8 mm d-1 MPa-1. Abdul-Jabbar et al. (1984) found literature values to range only from 7 to 30 mm d-1 MPa-1, which seems a surprisingly narrow range for plant canopies of any species. Actual plant resistivity, rp, is determined in subroutine CANOPY.\n\nFig. EVP-1. Resistances and potentials in the liquid flow path for transpiration, for 3 layers with roots. Ï is the leaf potential, Ïx is potential at gorund level, and Ïti are total soil water potentials. rs is xylem resistance, rri are root resistances, and rsi are rhizosphere resistances.\n\nFigure EVP-1 shows the resistance network used in BROOK90. Each soil layer is considered to have a rhizosphere resistivity, rsi, and a root resistivity, rri, in series. Each layer is considered in parallel with the others. An additional resistivity in series accounts for resistance to flow through the xylem above ground level, rx. The total soil-water potential, Ïti, differs among layers. The leaf water potential, Ï, is assumed constant through the canopy. The potential at the ground surface is Ïx. This system and the parameterization of it was developed by Federer (1979) and Hunt and others(1991).\n\nThe xylem resistance, rx, is\n\nrx = fx rp ;\n\nwhere fx (FXYLEM) is an input parameter, which is probably close to zero for short canopies, but may be 0.5 or higher for forests (Hunt et al. 1991). The use of fx here specifies the amount of rp (RPLANT) that should not be divided among soil layers, so it is effectively the fraction of the plant resistance that is above ground level.\n\nThe plant resistance that is below ground level, rp - rx, is the parallel combination of the individual layer resistances, rri (Fig. EVP-1). BROOK90 assumes that the root resistivity per unit length of root is constant, so rri (RROOTI) is inversely proportional to the fraction of total root length that is in each layer, fi\n\nrri = ( rp - rx ) / fi .\n\nBROOK90 parameterizes root distribution by the relative density of roots in each soil layer di (RELDENi). RELDENi is obtained from ROOTDEN in subroutine RTDEN . Then fi is\n\nfi = di Di / S ( di Di )\n\nwhere Di is the stone-free layer thickness, THICK(i) * (1 - STONEF(i)).\n\nWhen the soil is at uniform water potential and rhizosphere resistances, rsi , are negligible and fx = 0, then the relative transpiration withdrawal from each layer is proportional to fi (see subroutine TBYLAYER). Increasing fx makes the withdrawal less dependent on fi .\n\nUsually the rhizosphere resistance only becomes significant when the soil is dry. Following Federer (1979) and Cowan (1965), the rhizosphere resistance, rsi , calculated in subroutine TBYLAYER is rsi = Î±i / Ki , where Ki is the hydraulic conductivity of the rhizosphere. The value of Î±i (ALPHAi) for a layer is\n\nÎ±i = Ai / Ïwg Di\n\nwhere Ai from Cowan (1965) is\n\nAi = ( 1 / 8 Ï Li ) [ Î´i - 3 - 2 ( ln Î´i ) / ( 1 - Î´i ) ]\n\nwhere Li is the root density in the layer (mm/mm3) and Î´i is the root volume fraction in the layer, obtained as\n\nÎ´i = Ï R12 Li\n\nwhere R1 is the average radius of the absorbing roots (RTRAD) , which is an input parameter. (Note that Î´i has no relation to the daylength, Î´ ). The root density is\n\nLi = fi Lr / Di\n\nwhere Lr is the total length of absorbing roots per unit ground area in mm/mm2. The value of Lr in m/m2 is found in subroutine CANOPY as the parameter MXRTLN reduced by DENSEF and RELHT. The dependence on the seasonal RELHT assumes that root length increases proportionally with height growth. MXRTLN is an input parameter expressing the length of absorbing roots per unit ground area in m/m2. Lr and R1 only affect rhizosphere resistance and thus are only important for dry soil or when Lr is small. \"\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.EVP.TBYLAYER-NTuple{11,Any}","page":"Function Documentations","title":"LWFBrook90.EVP.TBYLAYER","text":"TBYLAYER()\n\nAllocate transporation among soil layers.\n\nEcoshift: TBYLAYER determines the rate at which liquid water can be supplied to transpiring leaves, compares this rate with the potential transpiration rate, sets actual transpiration equal to the lesser of the two, and then allocates the transpiration among soil layers. This routine is based on the model of Federer (1979), which has been widely used, e.g. Wetzel and Chang (1987), Levine and Salvucci (1999).\n\nThe routine requires iteration when outflow from roots is prevented for layers in which xylem potential Ïx is greater than soil water potential Ïti(Fig. EVP-1).\n\nThe resistance to uptake from each layer, ri, is\n\nri = rri + rsi = rri + Î±i / Ki\n\n(Fig. EVP-1) where rri (RROOTI) and Î±i (ALPHAi) are variables from subroutine PLNTRES and Ki is the rhizosphere conductivity of the layer (Cowan 1965, Federer 1979). Estimating rhizosphere conductivity requires an iterative solution as described in Federer (1979), so BROOK90 uses the Ki (KKi) of the bulk soil instead. This tends to underestimate the rhizosphere resistance, but the error is probably unimportant unless rp is quite small. The total root resistance to uptake is\n\nrt = 1 / Î£ ( 1 / ri ) .\n\nThe transpiration rate for each layer, Ti , is\n\nTi = ( Ïti - Ïx ) / ri\n\nwhere Ïti is the total water potential for the layer (PSITI) , and Ïx is the xylem potential. The total transpiration from all layers is\n\nT = Î£Ti = Î£( Ïti / ri ) - Ïx Î£ ( 1 / ri ) = ( Ït - Ïx ) / rt\n\nwhere Ït is a weighted mean soil water potential defined as\n\nÏt = Ït Î£ (Ïti / ri ) .\n\nEliminating Ïx from the Ti and T equations gives\n\nTi = ( Ïti - Ït + rt T ) / ri\n\nwhich is the equation used to distribute T among layers.\n\nIn BROOK90 actual transpiration rate, T, is the lesser of potential transpiration rate, P, and the maximum possible rate of water uptake from the soil, S. Following Federer (1979) and Lynn and Carlson (1990), BROOK90 assumes that the S obtains when the leaf potential, Ï, is the critical potential at which stomates close, Ïc , which is an input parameter (PSICR). The assumption that the T is the lesser of the P and S is equivalent to an assumption that stomatal opening is not limited by leaf water potential, Ï, until the critical potential, Ïc, is reached. The stomata are then assumed to close as much as necessary to maintain Ï = Ïc. This abrupt switch from a demand-limited to supply-limited regime is oversimplified, but is convenient for modeling. This type of behavior induces a flat-topped diurnal transpiration curve (Lynn and Carlson 1990). The critical potential, Ïc, represents the maximum suction that the plant can exert to get water from the soil, the minimum soil-water potential that the plant can induce, and the lower limit of soil water availability.\n\nThe water supply rate, S, is the potential difference between leaf water potential, Ï, and the xylem potential, Ïx, divided by the xylem resistance, rx , when Ï is equal to the critical potential, Ïc (see Fig EVP-1). With allowance for the gravity potential between the ground and the canopy zero-plane displacement height, d (DISP), this is\n\nS = ( Ïx - Ïc - Ïw g d ) / rx\n\nS below ground must be T = ( Ït - Ïx ) / rt from above, and equating the two S equations to eliminating Ïx, gives\n\nS = ( Ït - Ïc - Ïw g d) / ( rt + rx )\n\nwhich is assumed to be constant throughout a day.\n\nFig. EVP-2. Transpiration for the day, T' (shaded area), as the lesser of a constant water  supply rate, S, and a half-sine potential transpiration, P'.\n\nFollowing Federer (1982), BROOK90 assumes that the daytime potential transpiration rate, P', varies as a half sine wave. The actual transpiration rate, T' , is the lesser of S and P' (Fig. EVP-2). The average value of T' over the daytime, T, is\n\nT = P ( 1 + R cos-1 R - sin (cos-1 R) )  R < 1\n\nT = P       R >= 1\n\nwhere\n\nR = 2 S / Ï P\n\nwhere P is the average of P' over the daytime. (Notation here differs slightly from Federer (1982) who used S' for S, D/d for P, and T/d for T where d is daylength.) At night, P is assumed constant and T is the lesser of S and P.\n\nNormally, all layers with roots are included in the above calculations. However, when some layers are wet and others are dry, it is possible for Ïti (PSITI) in one or more layers to be lower than Ïx so that the roots in those layers are releasing water to the soil. The question of whether such outflow occurs or is somehow prevented by the roots is controversial (Hunt et al. 1991). More recent work shows that outflow does occur (Dawson 1993). Richards and Caldwell (1987) name the process \"hydraulic lift\" because it moves water upward from wetter deeper soil layers through the plant to shallow drier layers. In BROOK90 outflow from roots is prevented when the parameter NOOUTF is set to 1, and is allowed if NOOUTF is 0. In general, BROOK90 usually will work better when NOOUTF = 1; this is the default. When NOOUTF = 1 and any Ti is negative, the layer with the most negative Ti is eliminated and new values of rt , Ït , T, and Ti are obtained. If any Ti are still negative, the elimination process is repeated. This elimination procedure causes transpiration from a layer to cease when its potential is still greater than PSICR.\n\n\n\n\n\n","category":"method"},{"location":"code-lst/#Code-Listing","page":"Code Listing","title":"Code Listing","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Modules of LWFBrook90.jl are explained below in section Code structure and an exhaustive list of functions is listed below in section Code listing. Functions are documented more in detail on another page in section Function Documentations.","category":"page"},{"location":"code-lst/#Code-structure","page":"Code Listing","title":"Code structure","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"LWFBrook90.jl is organised in different modules. They are documented below:","category":"page"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Modules = [LWFBrook90,\n           LWFBrook90.CONSTANTS,\n           LWFBrook90.GLBLDECL,\n           LWFBrook90.KPT,\n           LWFBrook90.WAT,\n           LWFBrook90.SUN,\n           LWFBrook90.PET,\n           LWFBrook90.SNO,\n           LWFBrook90.EVP]\nOrder   = [:module]","category":"page"},{"location":"code-lst/#LWFBrook90.KPT","page":"Code Listing","title":"LWFBrook90.KPT","text":"Soil water properties\n\nText copied from Ecoshift on module KPT:\n\n\" This section describes the soil water properties in BROOK90, and the four routines used to calculate their values. The section also discusses the concept of field capacity, and how it is or is not used. Finally the section comments on the selection of soil water parameters and the use of the menu item EditParameters-KPTGraph. This section uses both the standard algebraic notation for soil water variables as in Clapp and Hornberger(1978) and the BROOK90 variable names. The correspondence is Î¸  = THETA   W  = WETNES  Ï  = PSIM    K  = KK    b = BEXP Î¸f = THETAF  Wf = WETF    Ïf = PSIF    Kf = KF    n = CHN Î¸s = THSAT   Wi = WETINF  Ïi = PSIINF  Ks = KSAT  m = CHM T  = THICK   S  = STONEF\n\nEcoshift-KPT: Functional relationships among soil-water content, Î¸, matric potential, Ï, and hydraulic conductivity, K, are required for any simulation that moves water through the soil. There is a rather vast literature on this subject, though much of it emphasizes agricultural soils rather than natural soils, which are less disturbed and higher in organic matter.\n\nClapp Hornberger (IMODEL=0) see: http://www.ecoshift.net/brook/kpt.html\n\nBROOK90 uses a modification of the Campbell (1974) expressions with the near-saturation interpolation of Clapp and Hornberger (1978).\n\nW = (Î¸ - Î¸r) / Î¸s - Î¸r)\nÎ¨ = Î¨s*W^(-b)              with b=1/Î»\nK = Ks*W^(2b+3)            with b=1/Î»\n\nnear saturated:\n\nÎ¨ = -m(W - n)(1 - W)     = (-mW + mn) +mW^2 -Wmn = mW^2 -m(1+n)W + m*n\n m = -Î¨i/(1 - Wi) * [1/(1-Wi) - b/Wi]\n n = 2 Wi - 1 + (b*Î¨i / (m*Wi))  ### where Î¨i is Î¨ at Wi obtained from 2)\n\nclearly unsaturated:\n\nÎ¨ = Î¨f(W/Wf)^(-b)       = Î¨fWf^(b)*W^(-b)\nK = Kf*(W/Wf)^(2b+3)  ### where Wf = Î¸f/Î¸s is the wetness at Î¸f (with Î¸r=0)\n==> dÏdW = Î¨fWf^(b)    (-bW^(-b-1))    # in clearly unsaturated range ==> dÏdW = 2mW - m(1+n)\n\nMualem van Genuchten (iModel=1)\n\nW = 1/(1 + (Î±h)^n )^m                         (Radcliffe eq.2.47)\nÏ = -1/Î± * [ (1-W^(1/m))*(W^(-1/m)) ]^(1/n)   (Radcliffe p.122)\n\n...\n\nK = KsW^l[ 1 - (1-W^(1/m))^m ]^2\n==> dÏdW = .....\n\n\"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#LWFBrook90.WAT","page":"Code Listing","title":"LWFBrook90.WAT","text":"Water movement in soil\n\nText copied from Ecoshift on module WAT:\n\n\" BROOK90 does not try to account for all possible paths of water movement through soil, which is a very complicated subject (McDonnell 1990). As a lumped parameter model it does not move water laterally between subareas. However, it does simulate several different pathways of water movement over or through the soil to streamflow and groundwater (see Flow Chart):\n\nsnowmelt and throughfall on impervious areas goes directly to streamflow (SRFL) snowmelt and precipitation on variable saturated source areas goes directly to streamflow (SRFL) remaining snowmelt and streamflow (SLFL) infiltrates either all to the surface layer or to several layers via vertical pipes or macropores (INFL) some infiltrated water can go directly to streamflow as \"bypass\" flow in pipes (BYFL) classic vertical matric flow between soil layers (VRFLI) lateral or downslope movement of matric water to streamflow (DSFL) vertical drainage of matric water to groundwater (VRFLN) discharge of groundwater to streamflow (GWFL) deep seepage loss from groundwater (SEEP)\n\nSLFL, INFL, VRFLI, and VRFLN are internal flows. SRFL and BYFL produce streamflow only on the day of precipitation, simulating a streamflow response of less than 24 hours duration. Users generally should choose one or the other of these flows. DSFL produces a response over several days only if VRFL is limited by a low conductivity layer within the profile or VRFLN is limited by setting DRAIN < < 1. VRFL from the bottom of the profile produces a response of several days only if there is no groundwater. GWFL reponse can vary from several to many days. SEEP produces no streamflow at all.\n\nIf the surface horizon becomes saturated, infiltration-excess overland flow is simulated as BYFL from the top layer. The input rate (SLFL) is constant over the precipitation interval, which may be a full day for most users. So with saturated hydraulic conductivities usually 200 mm/d or more, such overland flow will be rare.\n\nVertical water movement out of a layer is a combination of matrix flow, VRFL(I), and the macropore infiltration, SLFL(I). SLFL(I) either becomes BYFL from deeper layers or becomes soil water in deeper layers. VRFL(I) will generally increase with depth as SLFL(I) decreases. Lysimeter users may want to assume that suction lysimeters collect VRFL(I) whereas zero-tension lysimeters collect both VRFL(I) and SLFLI(I).\n\nIn this section a subscript i is used to indicate individual layers. \"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#LWFBrook90.SUN","page":"Code Listing","title":"LWFBrook90.SUN","text":"Radiation\n\nText copied from Ecoshift on module SUN:\n\n\" Daily solar radiation on a horizontal surface (SOLRAD in MJ/m2) is an input variable to BROOK90. This value is sometimes called global radiation to emphasize that it includes both direct or beam radiation from the sun and diffuse radiation from the sky hemisphere. It is directly measured by various types of pyranometers at most research sites and some locations of the National Weather Service. SOLRAD is internally prevented from being larger than 0.99 times the potential insolation (in the absence of an atmosphere), I0HDAY.\n\nIf no data are available and input SOLRAD is zero, BROOK90 uses a fixed fraction of the potential solar radiation on a horizontal surface. This fraction had been set at 0.55, but as of Version 4.8 it can be changed on the BROOK90 main window. Use of this generalized fraction loses the effects of day-to-day variation of solar radiation in the model.\n\nAlternatively, there are various simple to complicated methods for estimating SOLRAD from cloud cover measurements, which are more widely made (Brutsaert 1982, Dingman 1994).\n\nAnother approach to estimating daily solar radiation uses the fact that the daily temperature range is usually larger on clear days than on overcast ones. The equation of Bristow and Campbell (1984) has been used worldwide in various modifications. For Hubbard Brook I use\n\nR / I0 = a (1 - exp(-b Î ^ c)) + d\n\nwhere R is the daily solar radiation, I0 is the potential insolation (I0HDAY), and Î is the daily temperature range (Tmax - Tmin), and a, b, c, and d are constants that depend more or less on location. I added the d value so that R is greater than zero when Î is zero. For Hubbard Brook I use a = 0.78, c = 1.5, d = 0.05, and b = 0.245 + 0.0035 sin(2Ï (doy + 80) / 366) to account for some residual seasonality, where doy is day of the year.\n\nIn BROOK90 subroutine EQUIVSLP is called once to obtain parameters that depend on latitude, slope, and aspect of the surface being simulated. Subroutine SUNDS uses functions FUNC3 and HAFDAY once a day to calculate daylength, potential radiation on a horizontal surface, and the ratio of potential radiation on the slope to that on a horizontal surface. AVAILEN calculates net radiation minus soil heat flux at the top and the bottom of the canopy, separately for daytime and for nighttime. \"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#LWFBrook90.PET","page":"Code Listing","title":"LWFBrook90.PET","text":"Potential Evaporation\n\nText copied from Ecoshift on module PET:\n\n\" In this section, most equations are given in standard algebraic notation, as extended by Shuttleworth and Wallace (1985). The correspondence between algebraic notation and variable names is: found on http://www.ecoshift.net/brook/b90doc.html\n\nA common approach to estimating evaporation calculates a potential evaporation (PE) from weather variables, and then reduces actual evaporation below PE in response to soil drying. PE quantifies what the evaporation rate would be in the absence of any limitation of liquid water supply to the evaporating surfaces. It is thus an upper limit to the evaporation rate. Actual evaporation falls below the potential rate whenever liquid water supply to the plant leaves or to the soil surface cannot maintain the PE rate. Changing knowledge of limitations on evaporation has produced a variety of definitions of PE, which are related to the methods chosen to calculate it (Shuttleworth, 1991).\n\nFederer et al. (1996) use the term \"potential evaporation\" (PE) as a generic term to include the general concept and all definitions and methods. Then they distinguish three fundamentally different definitions of PE by subscripts. Reference-surface PE (PEr) is defined as the evaporation that would occur from a specified or reference land surface in given weather conditions with soil water at field capacity (Shuttleworth, 1991); the reference surface is normally defined as a short, complete, green plant cover. Surface-dependent PE (PEs) is defined as the evaporation that would occur from any given land surface in given weather conditions if plant surfaces were externally dry and soil water was at field capacity. Potential interception (PEi) is defined as the evaporation that would occur from any given land surface in given weather conditions if all plant and soil surfaces were externally wetted, as by rain. PEi and PEs depend on surface characteristics, most notably on canopy height and stomatal resistance respectively.\n\nShuttleworth and Wallace (1985) applied the well-known Penman-Monteith equation separately for the canopy and for the soil surface to give separate estimates of transpiration and soil evaporation. The Shuttleworth-Wallace approach was designed to be applicable to canopies of any leaf area index or \"sparseness\". Federer and others (1996) developed the Shuttleworth-Wallace method to estimate PEs and PEi for any land surface. To obtain the potential soil evaporation component, they used a soil surface at field capacity for PEs and a saturated soil surface for PEi.\n\nHowever, BROOK90 separates evaporation into two pathways and five processes controlled by five resistances to vapor transfer:\n\ncanopy evaporation\n    IRVP    raa + rac         evaporation of intercepted rain\n    ISVP    raa + rac         evaporation of intercepted snow\n    TRAN    raa + rac + rsc   transpiration\nground evaporation\n    SNVP    raa + ras         evaporation from snow on the ground\n    SLVP    raa + ras + rss   soil evaporation\n\nwhere raa is the above canopy resistance, rac and ras are the within canopy resistances from the canopy and from the ground (soil/snow), rsc is the canopy surface resistance (predominantly stomatal resistance), and rss is the resistance to vapor movement within the soil. These are the five resistances in the Shuttleworth-Wallace equations.\n\nIn BROOK90 only one canopy process and one ground process can occur at any given time. For IRVP, ISVP, and SNVP, the evaporating surfaces are always assumed saturated when the processes are occurring. In other words, they always evaporate at their own potential rate. The output value PINT is the interception evaporation that would occur if the canopy were continually wetted by snow or rain. IRVP and ISVP are equal to PINT as long as intercepted rain or snow remain on the canopy. Snow interception is treated identically with rain interception, with no allowance for melting the intercepted snow. When there is no interception, BROOK90 calculates and outputs potential transpiration, PTRAN, which is the transpiration that would occur if stomatal opening were not restricted by water supply to the leaves. It then reduces transpiration below PTRAN if low water supply to the leaves causes stomatal closure. For SNVP, BROOK90 avoids or neglects numerous problems of snow energy balance and any interaction with canopy evaporation by using only the vapor gradient and raa + ras, effectively a potential rate (see SNO-SNOVAP).\n\nBecause the ground evaporation and the canopy evaporation are calculated simultaneously in the Shuttleworth-Wallace equations, the potential interception or transpiration depend on the value of rss (which is zero for snow or saturated soil). Potential conditions for the canopy processes often do not occur at the same time as potential conditions for the surface processes. When there is no snow on the ground, BROOK90 calculates potential canopy evaporation using the ambient soil resisistance, rss. When there is snow, BROOK90 calculates surface snow evaporation using raa + ras and the vapor gradient, and canopy evaporation using rss = 0. The equations then provide the soil (ground) evaporation (GER) corresponding to PTR and the soil evaporation (GIR) corresponding to PIR. If actual transpiration is less than PTR, soil evaporation is recalculated.\n\nTheoretically the Penman-Monteith and Shuttleworth-Wallace equations are only valid for a short time period over which the weather variables are effectively constant. However, in spite of their non-linearities, the equations also give reasonable values when used with weather variables averaged over daily and even monthly periods (Federer et al. 1996). Although BROOK90 uses only daily weather data, PE estimates could be made for shorter time periods such as hourly by assuming diurnal distributions of weather variables. However, this would be costly of computer time. Tanner and Pelton (1960) suggested that the Penman equation would be more accurate when used on a daily basis if daytime and nighttime were separated. Federer et al. (1996) show that separation of daytime and nighttime also works well with the Shuttleworth-Wallace method.\n\nBROOK90 obtains evaporation rates separately for daytime and nighttime within a day-night evaporation loop. All solar radiation (SOLRAD) is assigned to the daytime. The atmospheric humidity (EA) is assumed constant through the day (\"day\" refers to 24 hours). The daytime and nighttime values of air temperature and wind speed are obtained in subroutine WEATHER using function WNDADJ. Vapor pressure deficit (VPD) is obtained using subroutine ESAT. Subroutine CANOPY uses function INTERP to obtain canopy structure variables for the day. Subroutine ROUGH gets canopy roughness parameters. Within a day-night loop, the three aerodynamic resistances needed by the Shuttleworth-Wallace method are calculated in subroutine SWGRA. The canopy surface resistance (RSC) for the daytime is obtained from subroutine SRSC, and the soil surface resistance (RSS) in function FRSS. Subroutine SWPE uses function PM along with the various resistances to obtain potential transpiration rate (PTR) and the associated ground or soil evaporation rate (GER) by the Shuttleworth-Wallace equations. Subroutine SWPE is called again with RSC = 0 to give potential interception rate (PIR) and its associated soil evaporation rate (GIR). Subroutine TBYLAYER obtains actual transpiration by layer (ATRANI). If the actual transpiration is less than the potential, a new, higher GER is calculated by subroutine SWGE. BROOK90 then weights the daytime and nighttime rates by the solar daylength (DAYLEN) to obtain average rates for the day, PTRAN, GEVP, PINT, GIVP, and TRANI, which are used in later calculations.\n\nPotential Evapotranspiration\n\nIn BROOK90, PEs (surface-dependent potential evapotranspiration) is not directly calculated, because that would involve changing the value of rss to its potential value (at field capacity), which would then change the values of IRVP, ISVP, and PTRAN. Can users obtain a value of PEs for comparison with other studies? In July 2013, in response to a query by Stefan PlÃ¶tner, I have figured out how PEs can be obtained. BROOK90 must be run with two parameter changes:\n\nIn Fixed Parameters set RSSB to zero. This forces rss = RSSA, which is defined in BROOK90 as the value at \"field capacity\", and forces SNVP to be at the potential rate. Shuttleworth and Gurney (1990) point out that appropriate values of rss are poorly known (as is the dependence of rss on soil wetness). BROOK90 suggests using their value of 500 s/m for RSSA. In fact, it is perfectly feasible to avoid the \"field capacity\" concept by DEFINING potential soil evaporation as that which would occur at a fixed rss such as 500 s/m. Note that the potential SLVP is nearly inversely proportional to this rather arbitrary value. In Soil Parameters set THICK(1) = 9999 (max allowed) and NLAYER = 1. This forces a very thick top soil layer that should not dry out. If THICK is too small, SLVP at the potential rate may make the top layer water content go negative, which crashes the model. These parameter changes may increase SLVP a lot, and will reduce PTRAN and ISVP a little, but will not change ISVP and SNVP. An estimate of PEs can then be obtained as: PEs = PTRAN + SLVP + IRVP\n\nISVP + SNVP.\n\nFunction PM - Penman-Monteith equation\n\nThe Penman-Monteith equation is\n\nL_v Ï_w E = fracÎ(Rn - S) + c_p Ï D_a  r_aÎ + Î³ + Î³(r_cr_a)\n\nwhere E is the evaporation rate in volume of water per unit land area per unit time, Lv is the latent heat of vaporization for water, Ïw is the density of water, Î is the rate of change of vapor pressure with temperature, Rn is the net radiation above the surface, S is the subsurface heat flux, cp is the heat capacity of air, Ïr is the density of air, Da is the vapor pressure deficit in the air, Î³ is the psychrometer constant, rc is the \"canopy resistance\", and ra is the aerodynamic resistance between the canopy and a reference height za at which Da is measured. The vapor pressure deficit, Da, is ea* - ea. The equation assumes that the vapor pressure at the effective evaporating surface, e0, is the saturated vapor pressure at the surface temperature. Then rc and ra are the two \"resistances\" through which water vapor passes as it moves down the vapor pressure gradient from e0 to ea. The canopy resistance, rc, represents resistance to flow of vapor through the stomates and cuticle of individual leaves and through the air around each leaf to some \"effective\" source height of water vapor in the plant canopy. The aerodynamic resistance, ra, is a measure of the turbulent transfer capability of the atmosphere between the effective source height and za. The Penman-Monteith equation is derived from the energy balance equation and the mass transfer equations for sensible and latent heat fluxes (e.g. Brutsaert 1982). \"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#LWFBrook90.SNO","page":"Code Listing","title":"LWFBrook90.SNO","text":"Snow accumulation and melt\n\nText copied from Ecoshift on module SNO:\n\n\" Simulation of snow accumulation and melt is a complex subject (U.S. Army Corps Eng. 1956, Anderson and Crawford 1964, Colbeck and Ray 1979). Detailed expressions for the energy balance of snow surfaces have been developed (Anderson 1976, Dingman 1994) but they are not generalized to all cover types and are too complex for BROOK90. Leavesley and Striffler (1979) give an energy balance model that includes radiation melt and the effects of canopy cover on it, but ignores convection-condensation melt. More complex algorithms could be developed, but Colbeck et al. (1979) say \"the energy exchange processes between snow and a forest cover are not well enough understood to allow detailed modelling of the melt process through use of the energy equation.\" The energy balance is made complicated because of the heat of fusion in the water-ice phase change, and because the surface vapor pressure for melting snow is fixed. Application of the Shuttleworth-Wallace two layer approach to snow under sparse canopies remains in the future.\n\nBROOK90 therefore falls back on the classic degree-day method for estimating snow energy balance. Anderson (1979, p. 342) states that \"Air temperature (ambient) is an adequate index to surface energy exchange in most cases.\" This is not a perfect solution as Anderson points out three cases in which air temperature fails: 1) warm temperatures with little wind causes overestimates of melt, 2) high dewpoint with high wind causes underestimates, and 3) low temperatures with clear sky and ripe snow causes underestimates. A modified degree-day method that incorporates solar radiation and wind speed could be added but would require development for sparse canopies. Another improvement would separate the day into daytime and nighttime as is done in BROOK90 for evaporation. But BROOK90 currently uses only the mean daily temperature (TA) for the snow energy balance.\n\nThe \"water equivalent\" of snow (SNOW, mm) is the depth of water a snowpack would produce if it were all melted; this is the BROOK90 variable that represents the snowpack. The actual depth of snow, assuming a constant snow density (SNODEN), is used only to calculate the amount of the canopy above the snow in subroutine CANOPY. Variable snow density (mass per unit volume) is not simulated in BROOK90. When the snow is colder than 0Â°C, it has a \"cold content\" (CC, MJ/m2), which is the energy needed to warm the snow to 0Â°C. When the snow is at 0Â°C, part of SNOW can be liquid water (SNOWLQ, mm). The maximum liquid water that can be retained by the snowpack without draining is a constant fraction (MAXLQF) of SNOW; CC and SNOWLQ are always initialized as zero in BROOK90, so any initial SNOW is considered to be at 0Â°C with no liquid water.\n\nGroundmelt is snowmelt at the bottom of a snowpack; it occurs because of heat conduction from the soil whenever the soil is unfrozen. A constant groundmelt rate (GRDMLT, mm/d) is an constant parameter in BROOK90 and is applied whenever there is snow on the ground. The possibilities of frozen soil or variable groundmelt are not considered.\n\nSnowmelt (SMLT, mm/d) is the sum of groundmelt and drainage of excess liquid water from the snowpack. Drainage occurs only after the snowpack is both isothermal at 0Â°C and is holding the maximum possible liquid water; the snowpack is then \"ripe\". The gains and losses of liquid water by the snowpack, including the refreezing of rain on cold snow, are handled in the somewhat complicated subroutine SNOWPACK.\n\nBROOK90 assumes that the snowpack is always isothermal. In reality, large and variable temperature gradients can exist in thick snowpacks; simulating these is beyond the scope of BROOK90. The snowpack temperature (TSNOW) at the beginning of the day is calculated in MSBSETVARS from the cold content\n\nTSNOW = -CC / (CVICE * SNOW)\n\nwhere CVICE is the heat capacity of ice (0.00192 MJ m-2 mm-1 K-1) (Leavesley and Striffler, 1979). TSNOW is used both in calculating snow evaporation (SNVP) and snow energy flux (SNOEN). \"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#LWFBrook90.EVP","page":"Code Listing","title":"LWFBrook90.EVP","text":"Interception and transpiration\n\nText copied from Ecoshift on module EVP:\n\n\" BROOK90 routines in this module relate to interception and actual transpiration. Subroutines INTER and INTER24, which handle the interception of rain or snow by the plant canopy are equivalent routines. INTER24 is used when parameter p_NPINT is 1 and precipitation is input once a day; it assumes that the daily precipitation all occurs within DURATN hours in the middle of the day. INTER is used when p_NPINT > 1 and precipitation is input more than once a day; it assumes that precipitation rate is constant through the precipitation time step. INTER and INTER24 are used both for rain and snow, with different calling parameters and variables. PLNTRES calculates parameters related to rhizosphere, root, and xylem resistance; it is called once at the beginning of each day. These parameters affect only soil water supply rate, not potential transpiration. TBYLAYER calculates the daily transpiration from each soil layer from the potential transpiration (PTRAN) and the total soil water potential in each layer (PSITI). \"\n\n\n\n\n\n","category":"module"},{"location":"code-lst/#Code-listing","page":"Code Listing","title":"Code listing","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Below all functions are listed and linked to section Function Documentations:","category":"page"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"","category":"page"},{"location":"user-guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"user-guide/#Installation-and-usage","page":"User Guide","title":"Installation and usage","text":"","category":"section"},{"location":"user-guide/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"First, download and install Julia: https://julialang.org/downloads/. If you like you can also install julia-vscode.org to get a complete IDE. Installation instructions for the VS Code Julia Extension are a bit hidden in their documentation. They can be found here: https://www.julia-vscode.org/docs/dev/gettingstarted/#Installation-and-Configuration-1.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To install LWFBrook90.jl open a Julia REPL, enter the Pkg REPL by pressing ] and add the package:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"(@v1.5) pkg> add LWFBrook90","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Dependencies of LWFBrookJulia.jl should automatically be installed.","category":"page"},{"location":"user-guide/#Usage","page":"User Guide","title":"Usage","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Check out a step-by-step in guide for a simulation in section Example","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The steps in a typical simulation script are:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"load the package using LWFBrook90\nload the package dependency using OrdinaryDiffEq: solve, Tsit5\nread input data\nset up model options\nset up an ODE problem (u0,tspan, p) and solve it with DifferentialEquations.jl\nplot and/or postprocess simulation results","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"LWFBrook90.jl can output additional quantities in daily resolution derived during simulation. Monthly or yearly quantities can be derived in the post processing. For performance reasons, e.g. for Bayesian parameter estimation, computation of these additional quantities can also be deactivated during simulation, and they could be calculated in a post-processing step from the state vector (not yet implemented).","category":"page"},{"location":"user-guide/#Input-data","page":"User Guide","title":"Input data","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To run a simulation following input data are needed","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"siteparam:\nmeteo:\nprecdat (currently unused):\npdur: (currently unused??)\nsoil_materials:\nsoil_nodes:\nparam:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Which contain problem-specific settings such as site paramters, meteorological drivers, and soil parameters as well as implementation-specific control settings in input_param.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The input files can be specified in two ways:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"read_inputData (TODO: not yet implemented) or\nread_LWFBrook90R_inputData (implemented).","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The first input data is not yet implemented. The second type of input data is more detailed and should be generated automatically by the user. The structure of the second type of input data is illustrated by the example input data BEA2016-* set located in the folder example/.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"An easy way to generate the second type of input data is by setting up a simulation with the R package LWFBrook90R (v0.4.3). Instead of running the simulation with run_LWFB90(), the same arguments can be used to generate the input files for LWFBrook90.jl using the R function provided in the file generate_LWFBrook90jl_Input.R.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To load load input data and prepare a simulation follow the instructions in section Example or alternatively use the sample script main.jl.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"In case you're unfamiliar to Julia, there are various ways to run a script such as main.jl: One possibility is to open the Julia REPL and run the script using include(âmain.jlâ). Alternatively, the editor VS Code in combination with the Julia extension (julia-vscode.org), provides a complete IDE for programming in Julia.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"note: Note\nTODO(bernhard): include units descriptions in tables below. And also discuss rounding.","category":"page"},{"location":"user-guide/#Needed-time-dependent-parameters-(daily-time-step):-meteo-data-and-stand-properties","page":"User Guide","title":"Needed time dependent parameters (daily time step): meteo data and stand properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Time dependent parameters (climate and vegetation) are provided in the following form:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"BEA2016-reset-FALSE_climveg.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"dates globrad tmax tmin vappres windspeed prec mesfl densef height lai sai age\n2016-01-01 4.08 5.5 -1.1 0.53 1.22 3.2 0 1 23 1.752 1 200\n2016-01-02 1.61 3.36 -2.08 0.49 0.89 0.2 0 1 23 1.752 1 200.00274","category":"page"},{"location":"user-guide/#Needed-constant-meteo-data","page":"User Guide","title":"Needed constant meteo data","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"pdur.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"\"x\"\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"param.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"\"x\",\"param_id\"\n366,\"ndays\"\n0,\"0_heat\"\n18.26,\"eslope\"\n225,\"aspect\"\n0.2,\"alb\"\n0.5,\"albsn\"\n0.25,\"c1\"\n0.5,\"c2\"\n0.2,\"c3\"\n0.3,\"wndrat\"\n5000,\"fetch\"\n0.005,\"z0w\"\n2,\"zw\"\n0.1,\"lwidth\"\n0.00325,\"obsheight_x_czs\"\n0.001,\"z0s\"\n4,\"lpc\"\n0.035,\"cs\"\n0.13,\"czs\"\n0.05,\"czr\"\n...\n0.5,\"dtimax\"\n0.05,\"dswmax\"\n5e-04,\"dpsimax\"","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"precdat.csv`","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"TODO(bernhard): support for precdat.csv is currently not implemented","category":"page"},{"location":"user-guide/#Needed-soil-properties","page":"User Guide","title":"Needed soil properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"soil_nodes.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"layer midpoint thick mat psiini rootden\n1 -0.02 40 1 -6.3 0.029\n2 -0.06 40 2 -6.3 0.025\n3 -0.14 120 3 -6.3 0.020\n4 -0.325 250 4 -6.3 0.012\n5 -0.6 300 5 -6.3 0.005\n6 -0.925 350 6 -6.3 0.002\n7 -1.15 100 7 -6.3 0.001","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"soil_materials.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"mat ths thr alpha npar ksat tort gravel\n1 0.715 0.069 1147.889 1.051 24864.678 4.670 0.010\n2 0.669 0.069 1274.886 1.051 12881.486 4.478 0.175\n3 0.656 0.069 1215.927 1.051 10516.617 4.502 0.175\n4 0.602 0.069 795.204 1.051 3438.063 4.345 0.175\n5 0.523 0.069 352.368 1.051 450.358 4.291 0.010\n6 0.565 0.069 570.682 1.051 1488.210 5.148 0.010\n7 0.467 0.069 164.564 1.051 67.978 0.010 0.950","category":"page"},{"location":"user-guide/#Calibration-data-(calibration-not-yet-implemented)","page":"User Guide","title":"Calibration data (calibration not yet implemented)","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Roadmap to include calibration data intends to allow inclusion of:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Throughfall amounts (for parametrisation of interception)\nSoil moisture (Î¸)\nSoil matric potential (Ï)","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"note: Note\nUSER GUIDE ENDS HERE.TODO(bernhard): after impelementation of function read_inputData Below is an illustration of the initial data sets that could be used.","category":"page"},{"location":"user-guide/#Needed-time-dependent-parameters-(daily-time-step):-meteo-data-and-stand-properties-2","page":"User Guide","title":"Needed time dependent parameters (daily time step): meteo data and stand properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site_id dates tmin tmax tmean prec relhum globrad wind vappres\n  Â°C Â°C Â°C mm % MJ/m2 m/s kPa\nBEA 01.01.2010 -6.39 1.85 -1.78 0.2 79.39 3.45 2.87 0.43\nBEA 02.01.2010 -14.09 -6.98 -10.83 0 79.25 7.26 3.6 0.21","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site X Y long_wgs84 lat_wgs84 tree height (m) max root depth (m) LAI tree age (yr) % of deciduous plants\nBEA 827262 165790 10.40555 46.60469346 3.5 1.1 1.91 80 45\nBEA 827620 165710 10.41018 46.60385246 8.5 1.0 1.91 80 50","category":"page"},{"location":"user-guide/#Needed-soil-properties-2","page":"User Guide","title":"Needed soil properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"LWF sites (TODO: format as LWFBrook90R):","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"TODO(Bernhard): remove this once an example data set is here.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site_id Total  soil depth horizon texture upper lower bd gravel sand silt clay c_org\nunit m KA5 GSTCS* (m) (m) (g cm-3) fraction (mass-%) (mass-%) (mass-%) (mass-%)\nMÃ¼nstertal_pit1 1.2 Ah Sl3 0 -0.05 1.32 0.1 70 20 10 9\n- - Bv â¦ -0.05 -0.4      \nMÃ¼nstertal_pit2 1.3 Ah  ...       \n- - Bv  ...       ","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"* GSTCS refers to: German soil texture classification system","category":"page"},{"location":"model/#SVAT-Model","page":"SVAT Model","title":"SVAT Model","text":"","category":"section"},{"location":"model/#Description","page":"SVAT Model","title":"Description","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is a 1D Soil-Vegetation-Atmosphere Transfer (SVAT) model, calculating the soil water balance in forest soil. Modelled processes include vertical soil water movement, soil and plant evapotranspiration and temporary storages in snowpack or interception layer.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Vertical soil water movement is modelled using the Richards equations and preferential flow. Mass loss through evaporation from temporary storages (snowpack or interception by vegetation) is included.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Processes and state variables in LWF-BROOK90 are summarised visually in Figure 1 below.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"<p align=\"center\">\n<img src='../assets/LWFBrook90jl_overview_v1.4-juliacolors.png' width=\"400\"><br>\n<br><em><b>Figure 1</b>: Summary of processes and state variables used in LWFBrook90.jl</em><br>\n<p>","category":"page"},{"location":"model/#Implementation","page":"SVAT Model","title":"Implementation","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"The model is implemented based code from the R package LWFBrook90R and its Fortran source code as well as the original implementation of BROOK90 (v4.8) (www.ecoshift.net/brook/b90doc.html).","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is 100% implemented in Julia. It defines the dynamical system in terms of ordinary differential equations and corresponding (time-varying) parameters and makes use of the package DifferentialEquations.jl for solving the evolution of the system state for a specified time tspan and intial conditions u0.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is developed with the following objectives in mind:","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"[ ] support for stable isotopes (Î´Â¹â¸O and Î´Â²H) by including transport equation and fractionation processes\n[ ] efficient parameter estimation (optimizing computational costs)\n[ ] model flexibility for alternative processes parametrizations (possibly resulting in a flexible model framework)","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Currently two mode of operation are distinguished by the flag compute_intermediate_quantities = true. It determines wheter additional, non-essential quantities are computed during simulation. The intent is to optimize computational cost.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl contains two parametrizations of the soil hydraulics: Mualem-van Genuchten and Clapp-Hornberger. They can be switched by setting the parameter IMODEL.","category":"page"},{"location":"model/#Implementation-details","page":"SVAT Model","title":"Implementation details","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl makes use of DifferentialEquations.jl to solve the system of Ordinary Differential Equations (ODE). Each state variable (u) has a corresponding ODE. The ODEs are defined by their right hand side defined in the function f (which sets du that is the rate of change in u). The right hand side f(u,p,t) depends on time t, parameters p (time-dependent or constant), and the state u.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Variable naming generally follows the convention by BROOK90 and LWFBrook90R, but uses additionally a prefix to indicate their dependencies (p_*, p_fT_*, p_fu_* for constant, time dependent or state dependent parameters, u_*, u_aux_* for elementary and auxiliary state variables respectively, and aux_du_* for auxiliary rate of changes of state variables).","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Note that some state variables (rain and snow interception storage, u_INTR, u_INTS and snow storage and energy u_SNOW, u_CC, u_SNOWLQ) are updated once per simulation day and other state variables (groundwater and soil water storages u_GWAT,u_SWATI) are solved on a higher resolved time discretization set by the ODE solver, resulting effecively in an operator splitting scheme.","category":"page"},{"location":"model/#Implementation-roadmap","page":"SVAT Model","title":"Implementation roadmap","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Some ideas for future development include:","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"include models of transport and fractionation processes\ninclude transport processes within tree stems\ntest use of parameter estimation procedures (check external Julia packages)\nrefactor code supporting model flexibility\ndistinguish Mualem-van Genuchten and Clapp-Hornberger parametrizations more cleanly and reduce redundundancy in code\nsplit LWFBrook90 code into sub-models:\none sub-model that precisely reproduces what LWFBrook90R did (w.r.t to adaptive time stepping, operator splitting in state variable updates and manual resetting of variables)\nanother sub-model that implements improved implementations of adaptive time stepping (using DiffEq.jl solution domain validity callbacks) and continuous, subdaily variable updates for all state variables","category":"page"},{"location":"#LWFBrook90.jl","page":"About","title":"LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Package repository: https://github.com/fabern/LWFBrook90.jl","category":"page"},{"location":"","page":"About","title":"About","text":"Pages = [\"index.md\",\n         \"model.md\",\n         \"user-guide.md\",\n         \"example.md\",\n         \"code-lst.md\",\n         \"function-docs.md\"]\nDepth = 2","category":"page"},{"location":"#About-LWFBrook90.jl","page":"About","title":"About LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"LWFBrook90.jl implements a 1D soil-vegetation-atmosphere transfer model. Intended use cases of this impelemntation are:","category":"page"},{"location":"","page":"About","title":"About","text":"support of stable isotopes (Î´Â¹â¸O and Î´Â²H)\nefficient model calibration for data analysis\nincreased model flexibility","category":"page"},{"location":"","page":"About","title":"About","text":"To read about the model structure, see section SVAT Model. For a quick start refer to the step-by-step guide in section Example For further details read through the section User Guide or refer to sections Code Listing and Function Documentations for further technical intricacies e.g. for development of the package.","category":"page"},{"location":"#Citing-LWFBrook90.jl","page":"About","title":"Citing LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"When using LWFBrook90.jl please cite <!â TODO.et.al (2021) â>","category":"page"},{"location":"","page":"About","title":"About","text":"TODO: generate citation: (Journal of Open Source Software? Zenodo? Journal of Open Research Software (DifferentialEquations.jl)? Alternatives?)","category":"page"},{"location":"#Acknowledgments","page":"About","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Brook90 (v4.8) by C. Anthony Federer\nLWFBrook90R (v0.4.3) by Paul Schmidt-Walter, Volodymyr Trotsiuk, Klaus Hammel, Martin Kennel, Anthony Federer, Robert Nuske\nMatthias HÃ¤ni, Katrin Meusburger, Peter Waldner, Lorenz Walthert, Stephan Zimmermann of WSL and the Long-term Forest Ecosystem Research (LWF) project of WSL are gratefully acknowledged for providing example data files located in example/BEA2016*.","category":"page"},{"location":"#References","page":"About","title":"References","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Federer, C. A., VÃ¶rÃ¶smarty, C., & Fekete, B. (2003). Sensitivity of Annual Evaporation to Soil and Root Properties in Two Models of Contrasting Complexity. Journal of Hydrometeorology, 4(6), 1276â1290. https://doi.org/10.1175/1525-7541(2003)004<1276:SOAETS>2.0.CO;2","category":"page"},{"location":"","page":"About","title":"About","text":"Federer, C. A. (2002). BROOK 90: A simulation model output for evaporation, soil water, and streamflow. http://www.ecoshift.net/brook/brook90.htm","category":"page"},{"location":"","page":"About","title":"About","text":"Hammel, K., & Kennel, M. (2001). Charakterisierung und Analyse der WasserverfÃ¼gbarkeit und des Wasserhaushalts von Waldstandorten in Bayern mit dem Simulationsmodell BROOK90 (No. 185; Forstliche Forschungsberichte MÃ¼nchen, p. 135). Technische Uni MÃ¼nchen Wissenschaftszentrum Weihenstephan. ISBN 3-933506-16-6","category":"page"},{"location":"","page":"About","title":"About","text":"Schmidt-Walter, P., Trotsiuk, V., Meusburger, K., Zacios, M., & Meesenburg, H. (2020). Advancing simulations of water fluxes, soil moisture and drought stress by using the LWF-Brook90 hydrological model in R. Agricultural and Forest Meteorology, 291, 108023. https://doi.org/10.1016/j.agrformet.2020.108023","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Example data from Beatenberg is located in subfolder example/. WSL is acknowledged for providing the input data (see section Acknowledgments).","category":"page"},{"location":"example/#Step-by-step-instructions","page":"Example","title":"Step-by-step instructions","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"To run the example simulation simulation simply call LWFBrook90.run_example(). For more control either run the script main.jlor follow the step-by-step instructiosn below.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Load packages:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using LWFBrook90\nusing OrdinaryDiffEq: solve, Tsit5","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Define and read in input data","category":"page"},{"location":"example/","page":"Example","title":"Example","text":" # 1a) Read in input data\ninput_prefix = \"BEA2016-reset-FALSE\"\ninput_path = \"example/\"*input_prefix*\"-input/\"\n\n(input_meteo,\n    input_param,\n    input_siteparam,\n    input_precdat,    #TODO(bernhard): input_precdat is unused\n    input_pdur,\n    input_soil_materials,\n    input_soil_nodes,\n    input_reference_date) = read_LWFBrook90R_inputData(input_path, input_prefix)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Now the user has the possibility to modify these input objects:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# 1b) Here posibility to modify dataframes input_[...] manually","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"After that the objects are further parsed and simulation parameters are defined. The user can select whether intermediate quantities such as e.g. evaporation fluxes should be stored during simulation (compute_intermediate_quantities = true) or whether processing steps during simulation should be kept to a minimum for performance reasons (compute_intermediate_quantities = false).","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# 1c) Parse loaded/redefined input files\n(pfile_meteo, pfile_param, pfile_siteparam, pfile_precdat, pfile_pdur, pfile_soil) =\n    derive_params_from_inputData(input_meteo,\n                                 input_param,\n                                 input_siteparam,\n                                 input_precdat,\n                                 input_pdur,\n                                 input_soil_materials,\n                                 input_soil_nodes,\n                                 input_reference_date)\n","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define simulation\n# Soil hydraulic model\nIMODEL = pfile_param[\"IMODEL\"] # 0 for Clapp-Hornberger; 1 for Mualem-van Genuchten\nNLAYER = pfile_param[\"NLAYER\"]\n\n# Define solver options\nNOOUTF    = 1 == pfile_param[\"NOOUTF\"] # 1 if no outflow allowed from roots, otherwise 0\nReset     = 0 # currently only Reset = 0 implemented\n\nconstant_dt_solver = 1 # [days]\n\n# Flag whether ODE containes additional quantities than only states\ncompute_intermediate_quantities = true\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then functions from the package are used to define the problem that will be handed to the solver from DifferentialEquations.jl. That is we need to define p, u0, and tspan","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"p:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define parameters for differential equation\np = define_LWFB90_p(NLAYER, IMODEL, constant_dt_solver,\n                    NOOUTF, Reset, compute_intermediate_quantities,\n                    pfile_meteo,\n                    pfile_siteparam,\n                    pfile_param,\n                    pfile_soil,\n                    pfile_pdur)\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"u0:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define initial states of differential equation\n# state vector: GWAT,INTS,INTR,SNOW,CC,SNOWLQ,SWATI\nu_GWAT_init = pfile_siteparam[\"u_GWAT_init\"]\nu_SNOW_init = pfile_siteparam[\"u_SNOW_init\"]\nu_INTS_init = pfile_param[\"INTS_init\"];\nu_INTR_init = pfile_param[\"INTR_init\"];\nu_CC_init     = 0; # any initial snow has zero liquid water and cold content\nu_SNOWLQ_init = 0; # any initial snow has zero liquid water and cold content\n\nu_aux_PSIM_init = pfile_soil[\"PSIM_init\"]\n\n######\n# Transform initial value of auxiliary state u_aux_PSIM_init into state u_SWATIinit:\nu_SWATIinit  = fill(NaN, NLAYER)\nif any( u_aux_PSIM_init.> 0)\n    error(\"Initial matrix psi must be negative or zero\")\nend\nif IMODEL == 0\n    error(\"IMODEL==0 is not implemented to get initial SWATI.\")\n    # TODO(bernhard): implement this.\nelseif IMODEL == 1\n    p_SWATMX = p[1][1][6]\n    # TODO(bernhard): this hardcoded index is dangerous in case definition of p vector changes\n    p_MvGÎ±   = pfile_soil[\"PAR\"][!,\"Î±\"]\n    p_MvGn   = pfile_soil[\"PAR\"][!,\"n\"]\n    p_THSAT  = pfile_soil[\"PAR\"][!,\"Î¸s\"]\n    p_Î¸r     = pfile_soil[\"PAR\"][!,\"Î¸r\"]\n    # TODO(bernhard): store above quantities somewhere else than p[1][1][3] and pfile_soil?\n    for i = 1:NLAYER\n        # Define initial u_SWATI based on input parameter\n        u_aux_WETNESinit_i = LWFBrook90.jl.KPT.FWETNES_MvG(u_aux_PSIM_init[i],\n                                                             p_MvGÎ±[i],\n                                                             p_MvGn[i])\n        u_SWATIinit[i]     = p_SWATMX[i]/p_THSAT[i] *\n                             LWFBrook90.jl.KPT.FTheta_MvG(u_aux_WETNESinit_i,\n                                                            p_THSAT[i],\n                                                            p_Î¸r[i])\n\n    end\nend\n######\n\n\n# Create u0 for DiffEq.jl\nu0 = define_LWFB90_u0(u_GWAT_init,\n                      u_INTS_init,\n                      u_INTR_init,\n                      u_SNOW_init,\n                      u_CC_init,\n                      u_SNOWLQ_init,\n                      u_SWATIinit,\n                      compute_intermediate_quantities)\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"tspan:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define ODE problem which consists of\n#   - definition of right-hand-side (RHS) function f\n#   - definition of callback function cb\n#   - u0:     initial condition of states\n#   - tspan:  definition of simulation time span\n#   - p:      parameters\n\n# Define simulation time span:\ntspan = (minimum(input_meteo[:,\"days\"]),\n         maximum(input_meteo[:,\"days\"])) # simulate all available days\n# Define ODE:\node_LWFBrook90 = define_LWFB90_ODE(u0, tspan, p)\n\n# Alternative definitions of tspan:\n# tspan = (0.,  5.) # simulate 5 days\n# tspan = (0.,  100.) # simulate 100 days\n# simulates specific period:\n# tspan = (LWFBrook90.jl.DateTime2RelativeDaysFloat(DateTime(1980,1,1), reference_date),\n#          LWFBrook90.jl.DateTime2RelativeDaysFloat(DateTime(1985,1,1), reference_date))\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then the ODE problem can be solved:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n## Solve ODE:\nsol_LWFBrook90 = solve(ode_LWFBrook90, Tsit5();\n    progress = true,\n    saveat = tspan[1]:tspan[2], dt=1e-6, adaptive = true); # dt will be overwritten\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Note to use the progress bar during the solve the optional package should additionally be installed and loaded: using ProgressLogging.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"The generated solution can be plotted using the plotting recipes of DifferntialEquations.jl for Plots.jl (see instructions)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n## Plotting\nusing Plots\nsol_LWFBrook90_Dates =\n    LWFBrook90.jl.RelativeDaysFloat2DateTime.(\n        sol_LWFBrook90.t,\n        input_reference_date)\n\n# Plot scalar quantities\n# Using dates (but not interpolated)\nplot(sol_LWFBrook90_Dates,\n    sol_LWFBrook90[[1,2,3,4,5,6],:]',\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Using simple plot recipe that interpolates, but without dates\nplot(sol_LWFBrook90;\n    vars = [1, 2, 3, 4, 5, 6],\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Plot vector quantities\n# http://docs.juliaplots.org/latest/generated/gr/#gr-ref43\nx = sol_LWFBrook90_Dates\ny = cumsum(pfile_soil[\"THICK\"])\nz = sol_LWFBrook90[7 .+ (0:example[\"NLAYER\"]-1), :]./pfile_soil[\"THICK\"]\nheatmap(x, y, z,\n    yflip = true,\n    xlabel = \"Date\",\n    ylabel = \"Depth\",\n    colorbar_title = \"Î¸\")","category":"page"},{"location":"example/#Plotting-results","page":"Example","title":"Plotting results","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Following plots illustrate results of the provided data set. The scalar state variables and depth-depenedent (vector) state variables can be plotted:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-b3f7183/2021-02-24_16h56_LWFBrook90Julia_plot_u_scalar.png\" width=\"400\"><br>\n<br><em><b>Figure 2</b>: Example simulation: scalar results</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-b3f7183/2021-02-24_16h56_LWFBrook90Julia_plot_u_vector.png\" width=\"400\"><br>\n<br><em><b>Figure 3</b>: Example simulation: vector results soil water</em><br>\n<p>","category":"page"},{"location":"example/#Comparison-with-LWFBrook90R","page":"Example","title":"Comparison with LWFBrook90R","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Tests are run to assert agreement with results from LWFBrook90R. Visualizations are reported below. Note that minor discrepancies ```@raw htmlare still present linked to the adaptive time stepping and intermediate updates of state variables.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-b3f7183/2021-02-24_16h56_R-vs-Julia_comparison_DailyRawValues.png\" width=\"400\"><br>\n<br><em><b>Figure 4</b>: Comparing daily outputs of LWFBrook90R and LWFBrook90.jl for example data set over a year</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-b3f7183/2021-02-24_16h56_R-vs-Julia_comparison_DailyRawValues_first3months.png\" width=\"400\"><br>\n<br><em><b>Figure 5</b>: Comparing daily outputs of LWFBrook90R and LWFBrook90.jl for example data set over 3 months</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Note that some features of LWFBrook90R are not implemented in the main version of LWFBrook90.jl. The time step adaptivity and Reset==1 are major ones that require some code refactoring that is not how the library for ODEs DiffEq.jl is intended to be used. Because of that implementation of these features is currently in a feature branch here on git feature 005. Below are some of the results of that code:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-2-55ca42d-feature005/2021-02-24_19h10_R-vs-Julia_comparison_DailyRawValues.png\" width=\"400\"><br>\n<br><em><b>Figure 6</b>: Comparing daily outputs of LWFBrook90R and experimental LWFBrook90.jl:feature-005 for example data set over a year</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/git-hash-2-55ca42d-feature005/2021-02-24_19h10_R-vs-Julia_comparison_DailyRawValues_first3months.png\" width=\"400\"><br>\n<br><em><b>Figure 7</b>: Comparing daily outputs of LWFBrook90R and experimental LWFBrook90.jl:feature-005 for example data set over 3 months</em><br>\n<p>","category":"page"}]
}

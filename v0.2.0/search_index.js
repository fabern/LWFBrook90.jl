var documenterSearchIndex = {"docs":
[{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"CurrentModule = LWFBrook90","category":"page"},{"location":"function-docs/#Function-Documentations","page":"Function Documentations","title":"Function Documentations","text":"","category":"section"},{"location":"function-docs/#Functions-from-file-example/BEA2016...-input/func_run_example.jl","page":"Function Documentations","title":"Functions from file example/BEA2016...-input/func_run_example.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"example/BEA2016-reset-FALSE-input/func_run_example.jl\"]","category":"page"},{"location":"function-docs/#LWFBrook90.run_example-Tuple{}","page":"Function Documentations","title":"LWFBrook90.run_example","text":"run_example()\n\nRun example simulation located in \"/example/BEA2016-reset-FALSE-input\" for 100 days and return a Dict containing the solution (solution object of DifferentialEquations.jl) and other variables useful for plotting.\n\nExample:\n\nusing LWFBrook90\nusing Plots\nexample = LWFBrook90.run_example()\n\n# Plot scalar solution\n# Using dates (but not interpolated)\nplot(example[\"solutionDates\"],\n    example[\"solution\"][[1,2,3,4,5,6],:]',\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Using simple plot recipe that interpolates, but without dates\nplot(example[\"solution\"];\n    vars = [1, 2, 3, 4, 5, 6],\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Plot vector solution\nx = example[\"solutionDates\"]\ny = cumsum(example[\"thickness\"])\nz = example[\"solution\"][7 .+ (0:example[\"NLAYER\"]-1), :]./example[\"thickness\"]\nheatmap(x, y, z,\n    yflip = true,\n    xlabel = \"Date\",\n    ylabel = \"Depth\",\n    colorbar_title = \"Î¸\")\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-from-file-LWFBrook90.jl","page":"Function Documentations","title":"Functions from file LWFBrook90.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"LWFBrook90.jl\"]","category":"page"},{"location":"function-docs/#Functions-from-file-func_read_inputData.jl","page":"Function Documentations","title":"Functions from file func_read_inputData.jl","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"func_read_inputData.jl\"]","category":"page"},{"location":"function-docs/#LWFBrook90.DateTime2RelativeDaysFloat-Tuple{Dates.DateTime, Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.DateTime2RelativeDaysFloat","text":"DateTime2RelativeDaysFloat(x,reference_DateTime)\n\nTransforms DateTimes x to simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.RelativeDaysFloat2DateTime-Tuple{Float64, Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.RelativeDaysFloat2DateTime","text":"RelativeDaysFloat2DateTime(t, reference_DateTime)\n\nTransforms simulation time t to DateTimes\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.p_DOY-Tuple{Float64, Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.p_DOY","text":"p_DOY(t::Float64, reference::DateTime)\n\nGet DOY (Day Of Year) from simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.p_MONTHN-Tuple{Float64, Dates.DateTime}","page":"Function Documentations","title":"LWFBrook90.p_MONTHN","text":"p_MONTHN(t::Float64, reference::DateTime)\n\nGet Month from simulation time\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.read_LWFBrook90R_inputData-Tuple{String, String}","page":"Function Documentations","title":"LWFBrook90.read_LWFBrook90R_inputData","text":"read_LWFBrook90R_inputData(folder::String, prefix::String)\n\nLoad different input files for LWFBrook90:\n\nmeteoveg\nparam\nsiteparam\npdur\nsoil_materials.csv\nsoil_nodes.csv\n\nThese files were created with an R script generate_LWFBrook90Julia_Input.R that takes the same arguements as the R funciton LWFBrook90R::run_LWFB90() and generates the corresponding Julia input functions.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-defining-the-DiffEq.jl-system-of-ODE-(p,-u0,-f,-callbacks,-...)","page":"Function Documentations","title":"Functions defining the DiffEq.jl system of ODE (p, u0, f, callbacks, ...)","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90]\nPages   = [\"func_DiffEq_definition_u0.jl\",\n           \"func_DiffEq_definition_p.jl\",\n           \"func_DiffEq_definition_cb.jl\",\n           \"func_DiffEq_definition_f.jl\",\n           \"func_DiffEq_definition_ode.jl\",\n           \"func_MSB_functions.jl\"\n           ]","category":"page"},{"location":"function-docs/#LWFBrook90.define_LWFB90_u0-NTuple{8, Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_u0","text":"define_LWFB90_u0()\n\nGenerate vector u0 needed for ODE() problem in DiffEq.jl package.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_p-NTuple{8, Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_p","text":"define_diff_eq_parameters()\n\nGenerate vector p needed for ODE() problem in DiffEq.jl package.\n\nArguments\n\nNLAYER::...: TODO argument description.\nIMODEL::...: TODO argument description.\nconstant_dt_solver::...: TODO argument description.\nNOOUTF::...: TODO argument description.\nReset::...: TODO argument description.\ncompute_intermediate_quantities::...: TODO argument description.\ninput_meteoveg::...: TODO argument description.\ninput_siteparam::...: TODO argument description.\ninput_param::...: TODO argument description.\ninput_soil::...: TODO argument description.\ninput_pdur::...: TODO argument description.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.discretize_soil_params-NTuple{10, Any}","page":"Function Documentations","title":"LWFBrook90.discretize_soil_params","text":"discretize_soil_params(input_soil_materials,IMODEL, ILAYER, QLAYER, NLAYER)\n\nDefine constant parameters from input_pdur. TO BE REDEFINED\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.interpolate_meteoveg-Tuple{DataFrames.DataFrame, Dates.DateTime, Any, Any, Any, Any, Any, Any}","page":"Function Documentations","title":"LWFBrook90.interpolate_meteoveg","text":"interpolate_meteoveg(input_meteoveg::DataFrame, input_meteoveg_reference_date::DateTime)\n\nTake climate and vegetation parameters in input_meteoveg and generates continuous parameters.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_cb-Tuple{}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_cb","text":"define_LWFB90_cb()\n\nGenerate callback function cb needed for ODE() problem in DiffEq.jl package.\n\nLWFBrook90 updates states INTS, INTR, SNOW, CC, SNOWLQ not continuously but only once per day. This operator splitting (daily vs continuous update of ODEs) is implemented by using this callback function which is called once per day.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.define_LWFB90_ODE-Tuple{Any, Any, Any}","page":"Function Documentations","title":"LWFBrook90.define_LWFB90_ODE","text":"define_LWFB90_ODE()\n\nGenerates an ODEProblem from DiffEq.jl\n\nAn ODE problem which consists of\n\ndefinition of right-hand-side (RHS) function f\ndefinition of callback function cb\ninitial condition of states\ndefinition of simulation time span\nparameters\n\nSeperate updating of different states (INTS, INTR, SNOW, CC, SNOWLQ are updated once per day while GWAT and SWATI are updated continuously) is implemented by means of operator splitting using a callback function for the daily updates and a ODE RHS (right hand side) for the continuous update.\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#LWFBrook90.MSBSETVARS-NTuple{54, Any}","page":"Function Documentations","title":"LWFBrook90.MSBSETVARS","text":"MSBSETVARS()\n\nCompute state dependent parameters for updating states INTS, INTR, SNOW, CC, SNOWLQ in callback function.\n\nArguments\n\nmany\n\n\n\n\n\n","category":"method"},{"location":"function-docs/#Functions-from-the-different-modules-defining-LWF-BROOK90","page":"Function Documentations","title":"Functions from the different modules defining LWF-BROOK90","text":"","category":"section"},{"location":"function-docs/","page":"Function Documentations","title":"Function Documentations","text":"Modules = [LWFBrook90.CONSTANTS,\n           LWFBrook90.GLBLDECL,\n           LWFBrook90.KPT,\n           LWFBrook90.WAT,\n           LWFBrook90.SUN,\n           LWFBrook90.PET,\n           LWFBrook90.SNO,\n           LWFBrook90.EVP\n           ]\nPages   = [\"module_CONSTANTS.jl\",\n           \"module_GLBLDECL.jl\",\n           \"module_KPT.jl\",\n           \"module_WAT.jl\",\n           \"module_SUN.jl\",\n           \"module_PET.jl\",\n           \"module_SNO.jl\",\n           \"module_EVP.jl\"\n           ]\nOrder = [:constant, :type, :function, :macro]","category":"page"},{"location":"code-lst/#Code-Listing","page":"Code Listing","title":"Code Listing","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Modules of LWFBrook90.jl are explained below in section Code structure and an exhaustive list of functions is listed below in section Code listing. Functions are documented more in detail on another page in section Function Documentations.","category":"page"},{"location":"code-lst/#Code-structure","page":"Code Listing","title":"Code structure","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"LWFBrook90.jl is organised in different modules. They are documented below:","category":"page"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Modules = [LWFBrook90,\n           LWFBrook90.CONSTANTS,\n           LWFBrook90.GLBLDECL,\n           LWFBrook90.KPT,\n           LWFBrook90.WAT,\n           LWFBrook90.SUN,\n           LWFBrook90.PET,\n           LWFBrook90.SNO,\n           LWFBrook90.EVP]\nOrder   = [:module]","category":"page"},{"location":"code-lst/#Code-listing","page":"Code Listing","title":"Code listing","text":"","category":"section"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"Below all functions are listed and linked to section Function Documentations:","category":"page"},{"location":"code-lst/","page":"Code Listing","title":"Code Listing","text":"","category":"page"},{"location":"user-guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"user-guide/#Installation-and-usage","page":"User Guide","title":"Installation and usage","text":"","category":"section"},{"location":"user-guide/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"First, download and install Julia: https://julialang.org/downloads/. If you like you can also install julia-vscode.org to get a complete IDE. Installation instructions for the VS Code Julia Extension are a bit hidden in their documentation. They can be found here: https://www.julia-vscode.org/docs/dev/gettingstarted/#Installation-and-Configuration-1.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To install LWFBrook90.jl open a Julia REPL, enter the Pkg REPL by pressing ] and add the package:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"(@v1.5) pkg> add LWFBrook90","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Dependencies of LWFBrookJulia.jl should automatically be installed.","category":"page"},{"location":"user-guide/#Usage","page":"User Guide","title":"Usage","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Check out a step-by-step in guide for a simulation in section Example","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The steps in a typical simulation script are:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"load the package using LWFBrook90\nload the package dependency using OrdinaryDiffEq: solve, Tsit5\nread input data\nset up model options\nset up an ODE problem (u0,tspan, p) and solve it with DifferentialEquations.jl\nplot and/or postprocess simulation results","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"LWFBrook90.jl can output additional quantities in daily resolution derived during simulation. Monthly or yearly quantities can be derived in the post processing. For performance reasons, e.g. for Bayesian parameter estimation, computation of these additional quantities can also be deactivated during simulation, and they could be calculated in a post-processing step from the state vector (not yet implemented).","category":"page"},{"location":"user-guide/#Input-data","page":"User Guide","title":"Input data","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To run a simulation following input data are needed","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"siteparam:\nmeteo:\nprecdat (currently unused):\npdur: (currently unused??)\nsoil_materials:\nsoil_nodes:\nparam:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Which contain problem-specific settings such as site paramters, meteorological drivers, and soil parameters as well as implementation-specific control settings in input_param.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The input files can be specified in two ways:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"read_inputData (TODO: not yet implemented) or\nread_LWFBrook90R_inputData (implemented).","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"The first input data is not yet implemented. The second type of input data is more detailed and should be generated automatically by the user. The structure of the second type of input data is illustrated by the example input data BEA2016-* set located in the folder example/.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"An easy way to generate the second type of input data is by setting up a simulation with the R package LWFBrook90R (v0.4.3). Instead of running the simulation with run_LWFB90(), the same arguments can be used to generate the input files for LWFBrook90.jl using the R function provided in the file generate_LWFBrook90jl_Input.R.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"To load load input data and prepare a simulation follow the instructions in section Example or alternatively use the sample script main.jl.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"In case you're unfamiliar to Julia, there are various ways to run a script such as main.jl: One possibility is to open the Julia REPL and run the script using include(âmain.jlâ). Alternatively, the editor VS Code in combination with the Julia extension (julia-vscode.org), provides a complete IDE for programming in Julia.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"note: Note\nTODO(bernhard): include units descriptions in tables below. And also discuss rounding.","category":"page"},{"location":"user-guide/#Needed-time-dependent-parameters-(daily-time-step):-meteo-data-and-stand-properties","page":"User Guide","title":"Needed time dependent parameters (daily time step): meteo data and stand properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Time dependent parameters (climate and vegetation) are provided in the following form:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"BEA2016-reset-FALSE_meteoveg.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"dates globrad tmax tmin vappres windspeed prec mesfl densef height lai sai age\n weather weather weather weather weather weather stream stand stand stand stand stand\n (MJ/m2) (Â°C) (Â°C) (kPa) (m/s) (mm/day) (unused) (-) (m) (-) (-) (years)\n2016-01-01 4.08 5.5 -1.1 0.53 1.22 3.2 0 1 23 1.752 1 200\n2016-01-02 1.61 3.36 -2.08 0.49 0.89 0.2 0 1 23 1.752 1 200.00274","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second and third rows containing description and unit headers is not contained in the input dataset.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"precdat.csv`","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"TODO(bernhard): support for precdat.csv is currently not implemented","category":"page"},{"location":"user-guide/#Needed-constant-meteo-data","page":"User Guide","title":"Needed constant meteo data","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"pdur.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"\"x\"\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"param.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"\"param_id\",\"x\"\n\"ndays\",366\n\"0_heat\",0\n\"eslope\",18.26\n\"aspect\",225\n\"alb\",0.2\n\"albsn\",0.5\n\"c1\",0.25\n\"c2\",0.5\n\"c3\",0.2\n\"wndrat\",0.3\n\"fetch\",5000\n\"z0w\",0.005\n\"zw\",2\n\"lwidth\",0.1\n\"obsheight_x_czs\",0.00325\n\"z0s\",0.001\n\"lpc\",4\n\"cs\",0.035\n\"czs\",0.13\n\"czr\",0.05\n...\n\"dtimax\",0.5\n\"dswmax\",0.05\n\"dpsimax\",5e-04","category":"page"},{"location":"user-guide/#Needed-soil-properties","page":"User Guide","title":"Needed soil properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"soil_nodes.csv:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"layer midpoint thick mat psiini rootden\n(-) (m) (mm) (#) (kPa) (-)\n1 -0.02 40 1 -6.3 0.029\n2 -0.06 40 2 -6.3 0.025\n3 -0.14 120 3 -6.3 0.020\n4 -0.325 250 4 -6.3 0.012\n5 -0.6 300 5 -6.3 0.005\n6 -0.925 350 6 -6.3 0.002\n7 -1.15 100 7 -6.3 0.001","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second row containing units is not contained in the input dataset.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"soil_materials.csv: (when using Mualem-van Genuchten parmetrization)","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"mat ths thr alpha npar ksat tort gravel\n(#) (-) (-) (m-1) (-) (mm/day) (-) (-)\n1 0.715 0.069 1147.889 1.051 24864.678 4.670 0.010\n2 0.669 0.069 1274.886 1.051 12881.486 4.478 0.175\n3 0.656 0.069 1215.927 1.051 10516.617 4.502 0.175\n4 0.602 0.069 795.204 1.051 3438.063 4.345 0.175\n5 0.523 0.069 352.368 1.051 450.358 4.291 0.010\n6 0.565 0.069 570.682 1.051 1488.210 5.148 0.010\n7 0.467 0.069 164.564 1.051 67.978 0.010 0.950","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second row containing units is not contained in the input dataset.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"soil_materials.csv: (when using Clapp-Hornberger parametrization) (NOT IMPLEMENTED!)","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"mat thsat thetaf psif bexp kf wtinf gravel\n(#) (-) (-) (kPa) (-) (mm/day) (-) (-)\nNA NA NA NA NA NA NA NA","category":"page"},{"location":"user-guide/#Calibration-data-(calibration-not-yet-implemented)","page":"User Guide","title":"Calibration data (calibration not yet implemented)","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Roadmap to include calibration data intends to allow inclusion of:","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Throughfall amounts (for parametrisation of interception)\nSoil moisture (volumetric water content, Î¸)\nSoil matric potential (Ï)","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"note: Note\nUSER GUIDE ENDS HERE.TODO(bernhard): after impelementation of function read_inputData Below is an illustration of the initial data sets that could be used.","category":"page"},{"location":"user-guide/#Needed-time-dependent-parameters-(daily-time-step):-meteo-data-and-stand-properties-2","page":"User Guide","title":"Needed time dependent parameters (daily time step): meteo data and stand properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site_id dates tmin tmax tmean prec relhum globrad wind vappres\n  Â°C Â°C Â°C mm % MJ/m2 m/s kPa\nBEA 01.01.2010 -6.39 1.85 -1.78 0.2 79.39 3.45 2.87 0.43\nBEA 02.01.2010 -14.09 -6.98 -10.83 0 79.25 7.26 3.6 0.21","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second row containing units is not contained in the input dataset.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site X Y long_wgs84 lat_wgs84 tree height max root depth LAI tree age % of deciduous plants\n(-) (m) (-) (Â°E WGS84) (Â°N WGS84) (m) (m) (-) (years) (%)\nBEA 827262 165790 10.40555 46.60469346 3.5 1.1 1.91 80 45\nBEA 827620 165710 10.41018 46.60385246 8.5 1.0 1.91 80 50","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"TODO: remove (X, Y)","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second row containing units is not contained in the input dataset.","category":"page"},{"location":"user-guide/#Needed-soil-properties-2","page":"User Guide","title":"Needed soil properties","text":"","category":"section"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"LWF sites (TODO: format as LWFBrook90R):","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"TODO(Bernhard): remove this once an example data set is here.","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"site_id Total soil depth horizon texture upper lower bd gravel sand silt clay c_org\nunit m KA5 GSTCS* (m) (m) (g cm-3) fraction (mass-%) (mass-%) (mass-%) (mass-%)\nMÃ¼nstertal_pit1 1.2 Ah Sl3 0 -0.05 1.32 0.1 70 20 10 9\n- - Bv â¦ -0.05 -0.4      \nMÃ¼nstertal_pit2 1.3 Ah  ...       \n- - Bv  ...       ","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"* GSTCS refers to: German soil texture classification system","category":"page"},{"location":"user-guide/","page":"User Guide","title":"User Guide","text":"Note that the second row containing units is not contained in the input dataset.","category":"page"},{"location":"model/#SVAT-Model","page":"SVAT Model","title":"SVAT Model","text":"","category":"section"},{"location":"model/#Description","page":"SVAT Model","title":"Description","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is a 1D Soil-Vegetation-Atmosphere Transfer (SVAT) model, calculating the soil water balance in forest soil. Modelled processes include vertical soil water movement, soil and plant evapotranspiration and temporary storages in snowpack or interception layer.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Vertical soil water movement is modelled using the Richards equations and preferential flow. Mass loss through evaporation from temporary storages (snowpack or interception by vegetation) is included.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Processes and state variables in LWF-BROOK90 are summarised visually in Figure 1 below.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"<p align=\"center\">\n<img src='../assets/LWFBrook90jl_overview_v1.4-juliacolors.png' width=\"400\"><br>\n<br><em><b>Figure 1</b>: Summary of processes and state variables used in LWFBrook90.jl</em><br>\n<p>","category":"page"},{"location":"model/#Implementation","page":"SVAT Model","title":"Implementation","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"The model is implemented based code from the R package LWFBrook90R and its Fortran source code as well as the original implementation of BROOK90 (v4.8) (www.ecoshift.net/brook/b90doc.html).","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is 100% implemented in Julia. It defines the dynamical system in terms of ordinary differential equations and corresponding (time-varying) parameters and makes use of the package DifferentialEquations.jl for solving the evolution of the system state for a specified time tspan and intial conditions u0.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl is developed with the following objectives in mind:","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"[ ] support for stable isotopes (Î´Â¹â¸O and Î´Â²H) by including transport equation and fractionation processes\n[ ] efficient parameter estimation (optimizing computational costs)\n[ ] model flexibility for alternative processes parametrizations (possibly resulting in a flexible model framework)","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Currently two mode of operation are distinguished by the flag compute_intermediate_quantities = true. It determines wheter additional, non-essential quantities are computed during simulation. The intent is to optimize computational cost.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl contains two parametrizations of the soil hydraulics: Mualem-van Genuchten and Clapp-Hornberger. They can be switched by setting the parameter IMODEL.","category":"page"},{"location":"model/#Implementation-details","page":"SVAT Model","title":"Implementation details","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"LWFBrook90.jl makes use of DifferentialEquations.jl to solve the system of Ordinary Differential Equations (ODE). Each state variable (u) has a corresponding ODE. The ODEs are defined by their right hand side defined in the function f (which sets du that is the rate of change in u). The right hand side f(u,p,t) depends on time t, parameters p (time-dependent or constant), and the state u.","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Variable naming generally follows the convention by BROOK90 and LWFBrook90R, but uses additionally a prefix to indicate their dependencies (p_*, p_fT_*, p_fu_* for constant, time dependent or state dependent parameters, u_*, u_aux_* for elementary and auxiliary state variables respectively, and aux_du_* for auxiliary rate of changes of state variables).","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Note that some state variables (rain and snow interception storage, u_INTR, u_INTS and snow storage and energy u_SNOW, u_CC, u_SNOWLQ) are updated once per simulation day and other state variables (groundwater and soil water storages u_GWAT,u_SWATI) are solved on a higher resolved time discretization set by the ODE solver, resulting effecively in an operator splitting scheme.","category":"page"},{"location":"model/#Implementation-roadmap","page":"SVAT Model","title":"Implementation roadmap","text":"","category":"section"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"Some ideas for future development include:","category":"page"},{"location":"model/","page":"SVAT Model","title":"SVAT Model","text":"include models of transport and fractionation processes\ninclude transport processes within tree stems\ntest use of parameter estimation procedures (check external Julia packages)\nrefactor code supporting model flexibility\ndistinguish Mualem-van Genuchten and Clapp-Hornberger parametrizations more cleanly and reduce redundundancy in code\nsplit LWFBrook90 code into sub-models:\none sub-model that precisely reproduces what LWFBrook90R did (w.r.t to adaptive time stepping, operator splitting in state variable updates and manual resetting of variables)\nanother sub-model that implements improved implementations of adaptive time stepping (using DiffEq.jl solution domain validity callbacks) and continuous, subdaily variable updates for all state variables","category":"page"},{"location":"#LWFBrook90.jl","page":"About","title":"LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Package repository: https://github.com/fabern/LWFBrook90.jl","category":"page"},{"location":"","page":"About","title":"About","text":"Pages = [\"index.md\",\n         \"model.md\",\n         \"user-guide.md\",\n         \"example.md\",\n         \"code-lst.md\",\n         \"function-docs.md\"]\nDepth = 2","category":"page"},{"location":"#About-LWFBrook90.jl","page":"About","title":"About LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"LWFBrook90.jl implements a 1D soil-vegetation-atmosphere transfer model. Intended use cases of this impelemntation are:","category":"page"},{"location":"","page":"About","title":"About","text":"support of stable isotopes (Î´Â¹â¸O and Î´Â²H)\nefficient model calibration for data analysis\nincreased model flexibility","category":"page"},{"location":"","page":"About","title":"About","text":"To read about the model structure, see section SVAT Model. For a quick start refer to the step-by-step guide in section Example For further details read through the section User Guide or refer to sections Code Listing and Function Documentations for further technical intricacies e.g. for development of the package.","category":"page"},{"location":"#Citing-LWFBrook90.jl","page":"About","title":"Citing LWFBrook90.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"When using LWFBrook90.jl please cite <!â TODO.et.al (2021) â>","category":"page"},{"location":"","page":"About","title":"About","text":"TODO: generate citation: (Journal of Open Source Software? Zenodo? Journal of Open Research Software (DifferentialEquations.jl)? Alternatives?)","category":"page"},{"location":"#Acknowledgments","page":"About","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Brook90 (v4.8) by C. Anthony Federer\nLWFBrook90R (v0.4.3) by Paul Schmidt-Walter, Volodymyr Trotsiuk, Klaus Hammel, Martin Kennel, Anthony Federer, Robert Nuske\nMatthias HÃ¤ni, Katrin Meusburger, Peter Waldner, Lorenz Walthert, Stephan Zimmermann of WSL and the Long-term Forest Ecosystem Research (LWF) project of WSL are gratefully acknowledged for providing example data files located in example/BEA2016*.","category":"page"},{"location":"#References","page":"About","title":"References","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Federer, C. A., VÃ¶rÃ¶smarty, C., & Fekete, B. (2003). Sensitivity of Annual Evaporation to Soil and Root Properties in Two Models of Contrasting Complexity. Journal of Hydrometeorology, 4(6), 1276â1290. https://doi.org/10.1175/1525-7541(2003)004<1276:SOAETS>2.0.CO;2","category":"page"},{"location":"","page":"About","title":"About","text":"Federer, C. A. (2002). BROOK 90: A simulation model output for evaporation, soil water, and streamflow. http://www.ecoshift.net/brook/brook90.htm","category":"page"},{"location":"","page":"About","title":"About","text":"Hammel, K., & Kennel, M. (2001). Charakterisierung und Analyse der WasserverfÃ¼gbarkeit und des Wasserhaushalts von Waldstandorten in Bayern mit dem Simulationsmodell BROOK90 (No. 185; Forstliche Forschungsberichte MÃ¼nchen, p. 135). Technische Uni MÃ¼nchen Wissenschaftszentrum Weihenstephan. ISBN 3-933506-16-6","category":"page"},{"location":"","page":"About","title":"About","text":"Schmidt-Walter, P., Trotsiuk, V., Meusburger, K., Zacios, M., & Meesenburg, H. (2020). Advancing simulations of water fluxes, soil moisture and drought stress by using the LWF-Brook90 hydrological model in R. Agricultural and Forest Meteorology, 291, 108023. https://doi.org/10.1016/j.agrformet.2020.108023","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Example data from Beatenberg is located in subfolder example/. WSL is acknowledged for providing the input data (see section Acknowledgments).","category":"page"},{"location":"example/#Step-by-step-instructions","page":"Example","title":"Step-by-step instructions","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"To run the example simulation simulation simply call LWFBrook90.run_example(). For more control either run the script main.jlor follow the step-by-step instructiosn below.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Load packages:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using LWFBrook90\nusing OrdinaryDiffEq: solve, Tsit5","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Define and read in input data","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# Read in input data\ninput_prefix = \"BEA2016-reset-FALSE\"\ninput_path = \"example/\"*input_prefix*\"-input/\"\n\n####################\n(input_meteoveg,\n    input_meteoveg_reference_date,\n    input_param,\n    input_siteparam,\n    input_precdat,    #TODO(bernhard): input_precdat is unused\n    input_pdur,\n    input_soil_materials,\n    input_soil_nodes) = read_LWFBrook90R_inputData(input_path, input_prefix)\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then simulation parameters are defined. The user has the possibility to modify the input variables before continuing with the simulation. Further the user can select whether intermediate quantities such as e.g. evaporation fluxes should be stored during simulation (compute_intermediate_quantities = true) or whether processing steps during simulation should be kept to a minimum for performance reasons (compute_intermediate_quantities = false).","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define solver options\nReset = false                          # currently only Reset = 0 implemented\ncompute_intermediate_quantities = true # Flag whether ODE containes additional quantities than only states\n\n# Override input file settings\n# Here possibility to check and override dataframes input_[...] manually\n    # # E.g:\n    # # Soil hydraulic model\n    # input_param[1,\"NOOUTF\"] = true # `true` if outflow from roots prevented, `false` if allowed\n####################\n","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then functions from the package are used to define the problem that will be handed to the solver from DifferentialEquations.jl. That is we need to define p, u0, and tspan","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"p:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define parameters for differential equation\np = define_LWFB90_p(\n    input_meteoveg,\n    input_meteoveg_reference_date,\n    input_param,\n    input_siteparam,\n    input_precdat,\n    input_pdur,\n    input_soil_materials,\n    input_soil_nodes;\n    Reset = Reset,\n    compute_intermediate_quantities = compute_intermediate_quantities)\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"u0:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define initial states of differential equation\n# state vector: GWAT,INTS,INTR,SNOW,CC,SNOWLQ,SWATI\nu_GWAT_init = input_siteparam[1, \"GWAT_init\"]\nu_SNOW_init = input_siteparam[1, \"SNOW_init\"]\nu_INTS_init = input_param[1,\"INTS_init\"]\nu_INTR_init = input_param[1,\"INTR_init\"]\nu_CC_init     = 0; # any initial snow has zero liquid water and cold content\nu_SNOWLQ_init = 0; # any initial snow has zero liquid water and cold content\n\nu_aux_PSIM_init = input_soil_nodes[:,\"psiini\"]\n######\n# Transform initial value of auxiliary state u_aux_PSIM_init into state u_SWATIinit:\nif any( u_aux_PSIM_init.> 0)\n    error(\"Initial matrix psi must be negative or zero\")\nend\n\np_soil = p[1][1]\nu_aux_WETNESinit = LWFBrook90.KPT.FWETNES(u_aux_PSIM_init, p_soil)\nu_SWATIinit      = p_soil.p_SWATMX ./ p_soil.p_THSAT .* LWFBrook90.KPT.FTheta(u_aux_WETNESinit, p_soil)\n######\n\n# Create u0 for DiffEq.jl\nu0 = define_LWFB90_u0(u_GWAT_init,\n                      u_INTS_init,\n                      u_INTR_init,\n                      u_SNOW_init,\n                      u_CC_init,\n                      u_SNOWLQ_init,\n                      u_SWATIinit,\n                      compute_intermediate_quantities)\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"tspan:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n# Define ODE problem which consists of\n#   - definition of right-hand-side (RHS) function f\n#   - definition of callback function cb\n#   - u0:     initial condition of states\n#   - tspan:  definition of simulation time span\n#   - p:      parameters\n\n# Define simulation time span:\ntspan = (minimum(input_meteoveg[:,\"days\"]),\n         maximum(input_meteoveg[:,\"days\"])) # simulate all available days\n\n# Define ODE:\node_LWFBrook90 = define_LWFB90_ODE(u0, tspan, p)\n\n# Alternative definitions of tspan:\n# tspan = (0.,  5.) # simulate days 0 to 5 (in the reference frame of the input data)\n# Simulation specific period (provided it is within the input data):\n# tspan = (LWFBrook90.jl.DateTime2RelativeDaysFloat(DateTime(1980,1,1), reference_date),\n#          LWFBrook90.jl.DateTime2RelativeDaysFloat(DateTime(1985,1,1), reference_date))\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then the ODE problem can be solved:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n## Solve ODE:\nsol_LWFBrook90 = solve(ode_LWFBrook90, Tsit5();\n    progress = true,\n    saveat = tspan[1]:tspan[2], dt=1e-6, adaptive = true); # dt is initial dt, but adaptive\n####################","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Note to use a progress bar indicating advancement of the solving is possible. It is sufficient to load the package using ProgressLogging.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"The generated solution can be plotted using the plotting recipes of DifferntialEquations.jl for Plots.jl (see instructions). An example is provided below:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"####################\n## Plotting\nusing Plots\nsol_LWFBrook90_Dates =\n    LWFBrook90.jl.RelativeDaysFloat2DateTime.(\n        sol_LWFBrook90.t,\n        input_meteoveg_reference_date)\n\n# Plot scalar quantities\n# Using dates (but not interpolated)\nplot(sol_LWFBrook90_Dates,\n    sol_LWFBrook90[[1,2,3,4,5,6],:]',\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Using simple plot recipe that interpolates, but without dates\nplot(sol_LWFBrook90;\n    vars = [1, 2, 3, 4, 5, 6],\n    label=[\"GWAT\" \"INTS\" \"INTR\" \"SNOW\" \"CC\" \"SNOWLQ\"])\n\n# Plot vector quantities\n# http://docs.juliaplots.org/latest/generated/gr/#gr-ref43\nx = sol_LWFBrook90_Dates\ny = cumsum(pfile_soil[\"THICK\"])\nz = sol_LWFBrook90[7 .+ (0:example[\"NLAYER\"]-1), :]./pfile_soil[\"THICK\"]\nheatmap(x, y, z,\n    yflip = true,\n    xlabel = \"Date\",\n    ylabel = \"Depth\",\n    colorbar_title = \"Î¸\")","category":"page"},{"location":"example/#Plotting-results","page":"Example","title":"Plotting results","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Following plots illustrate results of the provided data set. The scalar state variables and depth-depenedent (vector) state variables can be plotted:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/example-results/2021-03-16_11h27-Reset0-git+6e6946d+clean_LWFBrook90Julia_plot_u_scalar.png\" width=\"400\"><br>\n<br><em><b>Figure 2</b>: Example simulation: scalar results</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/example-results/2021-03-16_11h27-Reset0-git+6e6946d+clean_LWFBrook90Julia_plot_u_vector.png\" width=\"400\"><br>\n<br><em><b>Figure 3</b>: Example simulation: vector results soil water</em><br>\n<p>","category":"page"},{"location":"example/#Comparison-with-LWFBrook90R","page":"Example","title":"Comparison with LWFBrook90R","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Tests are run to assert agreement with results from LWFBrook90R. Visualizations are reported below. Note that minor discrepancies ```@raw htmlare still present linked to the adaptive time stepping and intermediate updates of state variables.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/example-results/2021-03-16_11h27-Reset0-git+6e6946d+clean_R-vs-Julia_Daily_first12M.png\" width=\"400\"><br>\n<br><em><b>Figure 4</b>: Comparing daily outputs of LWFBrook90R and LWFBrook90.jl for example data set over a year</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"<p align=\"center\">\n<img src=\"../assets/example-results/2021-03-16_11h27-Reset0-git+6e6946d+clean_R-vs-Julia_Daily_first2M.png\" width=\"400\"><br>\n<br><em><b>Figure 5</b>: Comparing daily outputs of LWFBrook90R and LWFBrook90.jl for example data set over 2 months</em><br>\n<p>","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Note that some features of LWFBrook90R are not implemented in the main version of LWFBrook90.jl. The time step adaptivity and Reset==1 are major ones that require some code refactoring that is not how the library for ODEs DiffEq.jl is intended to be used. Because of that implementation of these features is currently in a feature branch here on git feature 005.","category":"page"}]
}
